{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/profile.jpg","path":"images/profile.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458391397109},{"_id":"source/favicon.ico","hash":"96755b44d24cf7dd57d460b8b72d2d5685737160","modified":1458021447144},{"_id":"source/CNAME","hash":"43929ad14a150f8d53c881bf1dbf7784a1880bae","modified":1457966880055},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1457946554465},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1457946554465},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1457946554466},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1457946554466},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1457946554466},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1457946554467},{"_id":"themes/next/_config.yml","hash":"8d91167f17d3575a29fb95981b06acd33028855e","modified":1458022069609},{"_id":"themes/next/bower.json","hash":"93adc30dab22314f3757c3b6d3c13771de994b08","modified":1457946554468},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1457946554467},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1457946554467},{"_id":"themes/next/gulpfile.coffee","hash":"0494704f9e1ac8f63b9bd2791c443ffbf6091df3","modified":1457946554469},{"_id":"themes/next/package.json","hash":"afc2cbda2fe4643808c151135d5528267ee634c4","modified":1457946554494},{"_id":"source/_posts/20151226-01.md","hash":"6102ac60cb0f1b37cbc0f18b57a9f3c2d8471849","modified":1458125104792},{"_id":"source/_posts/20160125-01.md","hash":"a58ead7bf899d968a4f1683e4b39711d2adc6c9a","modified":1458125114647},{"_id":"source/_posts/20160129-01.md","hash":"39a3f02750da88f8b836ec8121690e489aa4c6ae","modified":1458133853678},{"_id":"source/_posts/20160205-01.md","hash":"de09466fc81474f4779988050c7424eb5b977d69","modified":1458275670436},{"_id":"source/_posts/20160207-01.md","hash":"090b9d47ebb3343fba580b46a1335c1e97a33e8f","modified":1458397373704},{"_id":"source/_posts/20160323-01.md","hash":"2fa0a4f0cbadc306b6e779a36f4c5124d6eb847f","modified":1458735518456},{"_id":"source/_posts/20160324-01.md","hash":"4b05cb237bc5f962ce750076b453d58a76598456","modified":1458829198082},{"_id":"source/_posts/20160328-01.md","hash":"836f21f4aa70b878d8b4ec6f9e7445fb9646a066","modified":1459253405453},{"_id":"source/_posts/20160324-03.md","hash":"2ddb05f74ed1537f90910e2dd7eadb104ffde8c4","modified":1458830477164},{"_id":"source/_posts/20160408-01.md","hash":"273789c1d57ffac777ed275410ae8388add08411","modified":1460126656869},{"_id":"source/_posts/20160324-02.md","hash":"416dc1badb9c296675a5abfd8a33eed0e639b852","modified":1459255186874},{"_id":"source/_posts/project_learning.md","hash":"a222b7d434c09b06a2b1cf535c6cb79e34186ea2","modified":1458576169815},{"_id":"source/about/index.md","hash":"74ba4cfca107e7c522d61599f976118af3dbae4d","modified":1458008969668},{"_id":"source/categories/index.md","hash":"733d77410f4b770dbaa01f4da57ce283d29c91cf","modified":1458019701243},{"_id":"source/images/profile.jpg","hash":"541dfe115b7ed973d0d39bfbe63ad2d3dd914033","modified":1457924727475},{"_id":"source/tags/index.md","hash":"096f9de11c6220e2f5271699227f6c2a9690ffac","modified":1458009396317},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1457946554424},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1457946554430},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1457946540736},{"_id":"themes/next/.git/index","hash":"beb2a7e24a35fff6844d7a6a47efcfb54f2af426","modified":1457946554592},{"_id":"themes/next/.git/packed-refs","hash":"cb28a1bf00dd40c9546610158957262da930aa88","modified":1457946554419},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1457946554469},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1457946554470},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1457946554470},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1457946554471},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1457946554471},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1457946554471},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1457946554472},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1457946554472},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1457946554473},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1457946554473},{"_id":"themes/next/layout/_layout.swig","hash":"1b157843c811ffd0e865093586f0b6f172b73018","modified":1457946554474},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1457946554491},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1457946554491},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1457946554492},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1457946554492},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1457946554493},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1457946554493},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1457946554494},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1457946554591},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1457946554591},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1457946554592},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554531},{"_id":"source/_posts/20160323-01/example.jpg","hash":"9e72a1f8b6d0577ebe0fb190adfc46d3d29d4076","modified":1458735330339},{"_id":"source/_posts/20160408-01/memory.jpg","hash":"7d19c0a904c4d127e1a0b7a23ccf85db17ede9bc","modified":1460125530694},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1457946540740},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1457946540737},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1457946540736},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1457946540737},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1457946540738},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1457946540738},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1457946540737},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1457946540738},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1457946540739},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1457946540739},{"_id":"themes/next/.git/logs/HEAD","hash":"c834975909d2c75037ba385ebf348cb4d28b393e","modified":1457946554427},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1457946554474},{"_id":"themes/next/layout/_macro/post.swig","hash":"4fc548ae72054b9950f17f3dfa90a6ac81406bde","modified":1458024385152},{"_id":"themes/next/layout/_macro/reward.swig","hash":"89f3d2e978d4062b470e774eda21c2ed3a086ab9","modified":1457946554475},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1457946554476},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6de4ea6db39fe8e04b058bcefc5b23f954726e77","modified":1457946554476},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cba20577cea89196d714ddfe6b3ea00f7c906ba7","modified":1457946554477},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1457946554477},{"_id":"themes/next/layout/_partials/header.swig","hash":"b9c0b6961affd8e2140002a5f84abd264c80805c","modified":1458022845477},{"_id":"themes/next/layout/_partials/head.swig","hash":"0e37bcbd15d08865c3e84fae9b072ed3f641ae08","modified":1458024359447},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1457946554479},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1457946554478},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1457946554482},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1457946554483},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1a51b8caa5130ff55948ae59dddb87ee0550c1e9","modified":1457946554491},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1457946554495},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1457946554531},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1457946554496},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1457946554496},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1457946554532},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1457946554532},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1457946554534},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1457946554533},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1457946554535},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1457946554534},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1457946554534},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1457946554533},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1457946554535},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1457946554535},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1457946554536},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1457946554536},{"_id":"source/_posts/20160328-01/java-thread.jpg","hash":"2e341a7fe230b9026a42084693a8103054b645bc","modified":1459171642071},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554484},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554484},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554520},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554529},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554530},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554521},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1457946554520},{"_id":"source/_posts/20151226-01/Image01.png","hash":"d143ebd7095122f78ffdfe08d179cb9e780efa65","modified":1458055823373},{"_id":"themes/next/.git/refs/heads/master","hash":"42617d7e6b9d84ec20ba3585469380e3d4113f47","modified":1457946554425},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1457946554479},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"241505c3c778f6b5dcc8db48f8f86ec87ade8a0f","modified":1457946554479},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1457946554480},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1457946554480},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1457946554482},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1457946554481},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1457946554481},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"6fa4daa91adee5800cbb0954e571b75e9796f99b","modified":1457946554483},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1457946554484},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1457946554485},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1457946554488},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1457946554489},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"66d6e04f17103a263d74b2ad73d392d81531f159","modified":1457946554490},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1457946554490},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1457946554490},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1457946554519},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1457946554520},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1457946554521},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1457946554529},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9f87ded9cde425048e8ae063cbb481e78a0e469c","modified":1457946554530},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f171c71d42f8798608235206dd41b37193faed88","modified":1457946554530},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1457946554531},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1457946554537},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1457946554538},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1457946554538},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1457946554539},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1457946554540},{"_id":"themes/next/source/js/src/utils.js","hash":"efcb2a7de9dc371d03a8598da2d71e2c53132d4c","modified":1457946554541},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1457946554541},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1457946554541},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1457946554549},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1457946554550},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1457946554551},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1457946554550},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1457946554554},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1457946554554},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1457946554555},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1457946554555},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1457946554555},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1457946554579},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1457946554581},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1457946554581},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1457946554582},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1457946554580},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1457946554582},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1457946554583},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1457946554586},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1457946554586},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1457946554589},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1457946554589},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1457946554590},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1457946554580},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c834975909d2c75037ba385ebf348cb4d28b393e","modified":1457946554426},{"_id":"themes/next/.git/objects/pack/pack-0803ab0e1b28c11eec08ba4eca6c3656dbc6413b.idx","hash":"8ff5c43cdad2470b975cbfa76884aa6a4a693d02","modified":1457946554146},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1457946554420},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1457946554486},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1457946554486},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1457946554486},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1457946554487},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1457946554487},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1457946554488},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"da8aa3beab56d8c306dd97cf41127a3859e2d00c","modified":1457946554489},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1457946554497},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1457946554498},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1457946554499},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1457946554499},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1457946554506},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1457946554513},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9da0ffa38fb3916ebadbaf99cb9ffd3057f730ac","modified":1457946554518},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1457946554518},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1457946554517},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1457946554518},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1457946554519},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"d110befc142dbb881c4fdcb94df65ed2f603f1c1","modified":1457946554519},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1457946554522},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1457946554522},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1457946554522},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1457946554523},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1457946554523},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1457946554523},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1457946554524},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1457946554525},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1457946554525},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8ffc548c9b61babf2781a35273797f45d3e4a2bd","modified":1457946554525},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1457946554526},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1457946554526},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1457946554525},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"59c0f66602ebc1c05c16f117bc8710d9f3744538","modified":1457946554526},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"96f95471da25d0e80c6b82f1e834b03c9aba58a9","modified":1457946554527},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"f575b82c8562a5cf1d0fb586c56a739ae70a35d3","modified":1457946554528},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1457946554528},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1457946554529},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"802e599b1ac749eac162dae396f66b0acaa5edcc","modified":1457946554528},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8b37699252a24741716b40fb70972a77453cbfe1","modified":1457946554540},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457946554542},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1457946554542},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457946554543},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1457946554543},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457946554543},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1457946554548},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1457946554549},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457946554544},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1457946554547},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1457946554553},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1457946554552},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1457946554578},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1457946554556},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1457946554557},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1457946554570},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1457946554585},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1457946554585},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1457946554571},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1457946554572},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1457946554577},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1457946554588},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c834975909d2c75037ba385ebf348cb4d28b393e","modified":1457946554424},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1457946554501},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1457946554500},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a5c4434940cb3ed9d16f361acf7c0cdbf7587f6c","modified":1457946554502},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1457946554501},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"f168f79ba8cc80c775907da4cc00d01771ac1e1e","modified":1457946554502},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"627cdd38b34b15c9fc17f4dc332b1be928f8ed0d","modified":1457946554503},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1457946554502},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"8539c1122966a6aea64267d48af05603caa5fa29","modified":1457946554504},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1457946554504},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1457946554503},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1457946554505},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1457946554505},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"68ed6b0ad40745cb07ecd38f13960bb217aef848","modified":1457946554506},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1457946554507},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1457946554508},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1457946554507},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5dba4ca272d7c767b57233cd99fba95dbf82153f","modified":1457946554508},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"c9e3c5aca361ed9bbfa41a9755f3c516025da67e","modified":1457946554508},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1457946554509},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1457946554509},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1457946554509},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1457946554510},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"98ab1039ec0726ba217a2f318ca53b737d07857c","modified":1457946554510},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1457946554510},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1457946554511},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1457946554511},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1457946554511},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1457946554512},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"97832be1f30b631dbc2202524918b6eb55e74c4b","modified":1457946554512},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1457946554513},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"546ad04994f74643334fd36cdb548c17f71b11be","modified":1457946554513},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1457946554513},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1457946554514},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1457946554514},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1457946554515},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1457946554515},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1457946554515},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1457946554516},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1457946554516},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"45ebfa59454dffe74ba9d86eb743dc84e4e449d2","modified":1457946554516},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0f368e6e95c0ba46580b491819e46ae31910c94b","modified":1457946554517},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1457946554524},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1457946554544},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1457946554545},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1457946554546},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1457946554547},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1457946554546},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1457946554546},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1457946554577},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1457946554575},{"_id":"themes/next/.git/objects/pack/pack-0803ab0e1b28c11eec08ba4eca6c3656dbc6413b.pack","hash":"c6d6d8d1af784752f56e9eaa2db97816dd578f12","modified":1457946554196},{"_id":"public/categories/index.html","hash":"30a2db0018fdd6a0e4341e284667f84e7078f8b9","modified":1460127498705},{"_id":"public/about/index.html","hash":"628160dd355fccbef2da90d43fd342787bdecaec","modified":1460127498705},{"_id":"public/tags/index.html","hash":"bffb607636fffae2f66e2a2df582d26485bc6b8e","modified":1460127498706},{"_id":"public/archives/page/2/index.html","hash":"cc4d240b4e52d0d4b8bbfa6ff68236c87b1b79b5","modified":1460127498706},{"_id":"public/archives/2015/index.html","hash":"d0c08c77d15b63f4111525f301a316441ca5f54c","modified":1460127498706},{"_id":"public/archives/2015/12/index.html","hash":"856532abe9e1bd6d8123b1068e2388d02cd514ba","modified":1460127498706},{"_id":"public/archives/2016/01/index.html","hash":"0e13be9095688fdecbdeaa451b89aa69a70097ef","modified":1460127498706},{"_id":"public/archives/2016/02/index.html","hash":"edbbe6ab24c3329b10909bb0706e2ad39a8667a4","modified":1460127498706},{"_id":"public/archives/2016/03/index.html","hash":"fdf2a3f34d88d70bfc5d46808bb4fc405f58c995","modified":1460127498706},{"_id":"public/categories/软件使用/index.html","hash":"b5a4396044c21c34674bfdb73243295be5909710","modified":1460127498706},{"_id":"public/categories/java/index.html","hash":"9069ff56562f2c06babdca0268d01d8b65b8e85e","modified":1460127498706},{"_id":"public/categories/Android/index.html","hash":"6545fae0aae159a155df371c998ef1883ce7c814","modified":1460127498706},{"_id":"public/tags/Android/index.html","hash":"6613068a0a165fb5c99fcb7f050a8159529fc547","modified":1460127498706},{"_id":"public/tags/software/index.html","hash":"ed25e323e7aee2db6fcaf7e8a789d7f3320aaee0","modified":1460127498706},{"_id":"public/tags/java/index.html","hash":"7df84da462e81b951a45d407c8c520113026bf46","modified":1460127498706},{"_id":"public/tags/软件使用/index.html","hash":"093312687478514f84ffae0c11ab762a4fce6851","modified":1460127498706},{"_id":"public/page/2/index.html","hash":"af419c7ded90ddcd1cf371737d095bebd7b2ffdd","modified":1460127498706},{"_id":"public/2016/03/28/20160328-01/index.html","hash":"5b9d4bd602b9496764108b3dc04c4c67f75b7be5","modified":1460127498706},{"_id":"public/2016/03/24/20160324-03/index.html","hash":"09974237a9c34289afa2e4d17de966b08909c640","modified":1460127498706},{"_id":"public/2016/03/24/20160324-02/index.html","hash":"67b058a2b3e29160ccaaf3955829e9c5de12ae0d","modified":1460127498706},{"_id":"public/2016/03/24/20160324-01/index.html","hash":"4c978b5ef1c2b2ac1f37ef54cc407d7d1fb22622","modified":1460127498707},{"_id":"public/2016/03/23/20160323-01/index.html","hash":"c1c3b157a9163101ff44badd43b6ba39c7c40125","modified":1460127498707},{"_id":"public/2016/02/07/20160207-01/index.html","hash":"b8917d6add052ec36b7901c23233315c2ad0a204","modified":1460127498707},{"_id":"public/2016/03/20/project_learning/index.html","hash":"b9ce51d66a95800da9fe01444ed3b62a480e9592","modified":1460127498707},{"_id":"public/2016/02/05/20160205-01/index.html","hash":"93545f074e66f94a18107721dcadefcdc51716e4","modified":1460127498707},{"_id":"public/2016/01/29/20160129-01/index.html","hash":"f028fe38cf1920cbecb3afd3bfbca568769742d1","modified":1460127498707},{"_id":"public/2016/01/25/20160125-01/index.html","hash":"712f5b6f1523e229aabe7c17e35f9b08a8c1bb5b","modified":1460127498707},{"_id":"public/2015/12/26/20151226-01/index.html","hash":"16adfc67cbeeaae7486ccf52cd125643f02bd2a8","modified":1460127498707},{"_id":"public/archives/index.html","hash":"6760b554ef2eb031131f589bc6fa50b8a4089784","modified":1460127498707},{"_id":"public/archives/2016/index.html","hash":"43f41f91cb78a7563d8bbfcfe99ae35ba6fb51f6","modified":1460127498707},{"_id":"public/index.html","hash":"5b88688920fe02c4b1a3294805396772762e681f","modified":1460127498707},{"_id":"public/archives/2016/page/2/index.html","hash":"5884f53d19d067c51d66a674003743d047d2cf66","modified":1460127498724},{"_id":"public/archives/2016/04/index.html","hash":"99b8fd5322920292a3bd528667d201253293fc5a","modified":1460127498724},{"_id":"public/tags/java-java虚拟机/index.html","hash":"e659a5e0e5f1043a1740274a9098649fa9ce9970","modified":1460127498724},{"_id":"public/2016/04/08/20160408-01/index.html","hash":"b9158fa9bf63db11286e3278230f84eb1d2ccf55","modified":1460127498724},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1460127498724},{"_id":"public/favicon.ico","hash":"96755b44d24cf7dd57d460b8b72d2d5685737160","modified":1460127498730},{"_id":"public/images/profile.jpg","hash":"541dfe115b7ed973d0d39bfbe63ad2d3dd914033","modified":1460127498730},{"_id":"public/CNAME","hash":"43929ad14a150f8d53c881bf1dbf7784a1880bae","modified":1460127498730},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1460127498730},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1460127498730},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1460127498730},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1460127498730},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1460127498730},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460127498731},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1460127498731},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460127498731},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1460127498731},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1460127498731},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1460127498731},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1460127498732},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1460127498732},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1460127498732},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460127498732},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460127498732},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460127498732},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460127498732},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460127498732},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460127498732},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1460127498732},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460127498732},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1460127498732},{"_id":"public/2016/03/23/20160323-01/example.jpg","hash":"9e72a1f8b6d0577ebe0fb190adfc46d3d29d4076","modified":1460127498732},{"_id":"public/2016/04/08/20160408-01/memory.jpg","hash":"7d19c0a904c4d127e1a0b7a23ccf85db17ede9bc","modified":1460127498732},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1460127499346},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1460127499352},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1460127499353},{"_id":"public/2016/03/28/20160328-01/java-thread.jpg","hash":"2e341a7fe230b9026a42084693a8103054b645bc","modified":1460127499353},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1460127499367},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1460127499367},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1460127499367},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1460127499367},{"_id":"public/js/src/utils.js","hash":"cf24307d8aeb18e9bad093647c7fb50dc3d9fbe8","modified":1460127499367},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1460127499367},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1460127499368},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1460127499368},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1460127499368},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1460127499368},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1460127499368},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1460127499368},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1460127499368},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1460127499368},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1460127499368},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1460127499368},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1460127499368},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1460127499368},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1460127499368},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1460127499368},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1460127499368},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460127499368},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1460127499368},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1460127499368},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460127499368},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1460127499368},{"_id":"public/css/main.css","hash":"8adbdad66f97495a70b3e4df2932e26fa623ec03","modified":1460127499368},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1460127499368},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1460127499368},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1460127499368},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1460127499369},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1460127499369},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1460127499369},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1460127499369},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1460127499369},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1460127499369},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1460127499369},{"_id":"public/2015/12/26/20151226-01/Image01.png","hash":"d143ebd7095122f78ffdfe08d179cb9e780efa65","modified":1460127499369},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1460127499387}],"Category":[{"name":"软件使用","_id":"cimru7nci0005tgxg9ute8gn5"},{"name":"java","_id":"cimru7ncx000ftgxgn8q0nakr"},{"name":"Android","_id":"cimru7ndd000utgxgj6r0pej2"}],"Data":[],"Page":[{"title":"categories","date":"2016-03-15T05:27:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-03-15 13:27:44\ntype: \"categories\"\n\n---\n","updated":"2016-03-15T05:28:21.243Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cimru7ncd0001tgxg9d1gtgsn","content":"","excerpt":"","more":""},{"title":"about","date":"2016-03-15T02:29:29.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-03-15 10:29:29\n---\n","updated":"2016-03-15T02:29:29.668Z","path":"about/index.html","comments":1,"layout":"page","_id":"cimru7ncg0003tgxgekr2chlw","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-03-15T02:36:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-15 10:36:07\ntype: \"tags\"\n---\n","updated":"2016-03-15T02:36:36.317Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cimru7nha001mtgxg4ez1g8t9","content":"","excerpt":"","more":""}],"Post":[{"title":"genymotion windows兼容性问题","date":"2015-12-26T15:28:52.000Z","_content":"\n\n{% asset_img Image01.png This is an example image %}\n\n\n貌似在这个<font color=red>ghost</font>系统下，经过我的测试只有4.3.1.2可以完美运行virtualbox ","source":"_posts/20151226-01.md","raw":"---\ntitle: genymotion windows兼容性问题\ndate: 2015-12-26 23:28:52\ntags: \n - Android \n - software\ncategories: 软件使用\n\n---\n\n\n{% asset_img Image01.png This is an example image %}\n\n\n貌似在这个<font color=red>ghost</font>系统下，经过我的测试只有4.3.1.2可以完美运行virtualbox ","slug":"20151226-01","published":1,"updated":"2016-03-16T10:45:04.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nc80000tgxgyepl28ij","content":"<img src=\"/2015/12/26/20151226-01/Image01.png\" alt=\"This is an example image\" title=\"This is an example image\">\n<p>貌似在这个<font color=\"red\">ghost</font>系统下，经过我的测试只有4.3.1.2可以完美运行virtualbox </p>\n","excerpt":"","more":"<img src=\"/2015/12/26/20151226-01/Image01.png\" alt=\"This is an example image\" title=\"This is an example image\">\n<p>貌似在这个<font color=red>ghost</font>系统下，经过我的测试只有4.3.1.2可以完美运行virtualbox </p>\n"},{"title":"个人idea快捷键整理","date":"2016-01-25T10:37:19.000Z","_content":"\n# IntelliJ Idea常用快捷键\n\n整理一下常用快捷键\n\nAlt+回车 导入包,自动修正\nCtrl+N   查找类  \nCtrl+Shift+N 查找文件  \nCtrl+Alt+L  格式化代码  \nCtrl+Alt+O 优化导入的类和包  \nAlt+Insert 生成代码(如get,set方法,构造函数等)  \nCtrl+E或者Alt+Shift+C  最近更改的代码  \nCtrl+R 替换文本  \nCtrl+F 查找文本  \nCtrl+Shift+Space 自动补全代码  \nCtrl+空格 代码提示  \nCtrl+Alt+Space 类名或接口名提示  \nCtrl+P 方法参数提示  \nCtrl+Shift+Alt+N 查找类中的方法或变量  \nAlt+Shift+C 对比最近修改的代码  \n \nShift+F6  重构-重命名  \nCtrl+Shift+先上键  \nCtrl+X 删除行  \nCtrl+D 复制行  \nCtrl+/ 或 Ctrl+Shift+/  注释（// 或者/*...*/ ）  \nCtrl+J  自动代码  \nCtrl+E 最近打开的文件  \nCtrl+H 显示类结构图  \nCtrl+Q 显示注释文档  \nAlt+F1 查找代码所在位置  \nAlt+1 快速打开或隐藏工程面板  \nCtrl+Alt+ left/right 返回至上次浏览的位置  \nAlt+ left/right 切换代码视图  \nAlt+ Up/Down 在方法间快速移动定位  \nCtrl+Shift+Up/Down 代码向上/下移动。  \nF2 或Shift+F2 高亮错误或警告快速定位  \n \n代码标签输入完成后，按Tab，生成代码。  \n选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。  \nCtrl+W 选中代码，连续按会有其他效果  \n选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。  \nCtrl+Up/Down 光标跳转到第一行或最后一行下  \nCtrl+B 快速打开光标处的类或方法   ","source":"_posts/20160125-01.md","raw":"---\ntitle: 个人idea快捷键整理\ndate: 2016-01-25 18:37:19\ntags: \n - java \n - Android \n - software\ncategories: 软件使用 \n---\n\n# IntelliJ Idea常用快捷键\n\n整理一下常用快捷键\n\nAlt+回车 导入包,自动修正\nCtrl+N   查找类  \nCtrl+Shift+N 查找文件  \nCtrl+Alt+L  格式化代码  \nCtrl+Alt+O 优化导入的类和包  \nAlt+Insert 生成代码(如get,set方法,构造函数等)  \nCtrl+E或者Alt+Shift+C  最近更改的代码  \nCtrl+R 替换文本  \nCtrl+F 查找文本  \nCtrl+Shift+Space 自动补全代码  \nCtrl+空格 代码提示  \nCtrl+Alt+Space 类名或接口名提示  \nCtrl+P 方法参数提示  \nCtrl+Shift+Alt+N 查找类中的方法或变量  \nAlt+Shift+C 对比最近修改的代码  \n \nShift+F6  重构-重命名  \nCtrl+Shift+先上键  \nCtrl+X 删除行  \nCtrl+D 复制行  \nCtrl+/ 或 Ctrl+Shift+/  注释（// 或者/*...*/ ）  \nCtrl+J  自动代码  \nCtrl+E 最近打开的文件  \nCtrl+H 显示类结构图  \nCtrl+Q 显示注释文档  \nAlt+F1 查找代码所在位置  \nAlt+1 快速打开或隐藏工程面板  \nCtrl+Alt+ left/right 返回至上次浏览的位置  \nAlt+ left/right 切换代码视图  \nAlt+ Up/Down 在方法间快速移动定位  \nCtrl+Shift+Up/Down 代码向上/下移动。  \nF2 或Shift+F2 高亮错误或警告快速定位  \n \n代码标签输入完成后，按Tab，生成代码。  \n选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。  \nCtrl+W 选中代码，连续按会有其他效果  \n选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。  \nCtrl+Up/Down 光标跳转到第一行或最后一行下  \nCtrl+B 快速打开光标处的类或方法   ","slug":"20160125-01","published":1,"updated":"2016-03-16T10:45:14.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nce0002tgxgubixixsv","content":"<h1 id=\"IntelliJ-Idea常用快捷键\"><a href=\"#IntelliJ-Idea常用快捷键\" class=\"headerlink\" title=\"IntelliJ Idea常用快捷键\"></a>IntelliJ Idea常用快捷键</h1><p>整理一下常用快捷键</p>\n<p>Alt+回车 导入包,自动修正<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>Ctrl+Alt+L  格式化代码<br>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等)<br>Ctrl+E或者Alt+Shift+C  最近更改的代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+Shift+Space 自动补全代码<br>Ctrl+空格 代码提示<br>Ctrl+Alt+Space 类名或接口名提示<br>Ctrl+P 方法参数提示<br>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>Alt+Shift+C 对比最近修改的代码  </p>\n<p>Shift+F6  重构-重命名<br>Ctrl+Shift+先上键<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+J  自动代码<br>Ctrl+E 最近打开的文件<br>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Alt+ left/right 切换代码视图<br>Alt+ Up/Down 在方法间快速移动定位<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位  </p>\n<p>代码标签输入完成后，按Tab，生成代码。<br>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。<br>Ctrl+W 选中代码，连续按会有其他效果<br>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下<br>Ctrl+B 快速打开光标处的类或方法   </p>\n","excerpt":"","more":"<h1 id=\"IntelliJ-Idea常用快捷键\"><a href=\"#IntelliJ-Idea常用快捷键\" class=\"headerlink\" title=\"IntelliJ Idea常用快捷键\"></a>IntelliJ Idea常用快捷键</h1><p>整理一下常用快捷键</p>\n<p>Alt+回车 导入包,自动修正<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>Ctrl+Alt+L  格式化代码<br>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等)<br>Ctrl+E或者Alt+Shift+C  最近更改的代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+Shift+Space 自动补全代码<br>Ctrl+空格 代码提示<br>Ctrl+Alt+Space 类名或接口名提示<br>Ctrl+P 方法参数提示<br>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>Alt+Shift+C 对比最近修改的代码  </p>\n<p>Shift+F6  重构-重命名<br>Ctrl+Shift+先上键<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+J  自动代码<br>Ctrl+E 最近打开的文件<br>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Alt+ left/right 切换代码视图<br>Alt+ Up/Down 在方法间快速移动定位<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位  </p>\n<p>代码标签输入完成后，按Tab，生成代码。<br>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。<br>Ctrl+W 选中代码，连续按会有其他效果<br>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下<br>Ctrl+B 快速打开光标处的类或方法   </p>\n"},{"title":"java中的堆内存和栈内存","date":"2016-01-29T12:29:06.000Z","_content":"\njava中内存也是大致有**栈内存**和**堆内存**  \n当代码中定义一些基本类型变量或者引用变量，虚拟机会在**栈**中分配内存  \n然后到这个作用域结束，java会自动回收该部分内存  \n而当你要new对象或者数组，这块内存将会在**堆**里分配。这块内存会有java虚拟机来自动回收。  \n所谓的 **引用变量**，类似于 **指针**，是分配在栈内存当中的，然而指向堆内存。当一个new出来的对象没有再被引用指向的时候，就会被垃圾回收器在不定时清掉。\n\n## 内存分配策略\n\n### 1.静态存储分配\n在编译的时候就能确定每个数据目标的存储空间，不允许可变数据结构。\n### 2.栈式存储分配\n编译时对程序区未知，只有到运行，在进入某一个程序区块时候，才能为其分配内存。栈式内存符合先进后出\n### 3.堆式存储分配\n堆中的内存无法在编译时和运行时确定，可按任意顺序分配释放\n\n\n---\n\n\n","source":"_posts/20160129-01.md","raw":"---\ntitle: java中的堆内存和栈内存\ndate: 2016-01-29 20:29:06\ntags: \n - java\ncategories: java\n\n---\n\njava中内存也是大致有**栈内存**和**堆内存**  \n当代码中定义一些基本类型变量或者引用变量，虚拟机会在**栈**中分配内存  \n然后到这个作用域结束，java会自动回收该部分内存  \n而当你要new对象或者数组，这块内存将会在**堆**里分配。这块内存会有java虚拟机来自动回收。  \n所谓的 **引用变量**，类似于 **指针**，是分配在栈内存当中的，然而指向堆内存。当一个new出来的对象没有再被引用指向的时候，就会被垃圾回收器在不定时清掉。\n\n## 内存分配策略\n\n### 1.静态存储分配\n在编译的时候就能确定每个数据目标的存储空间，不允许可变数据结构。\n### 2.栈式存储分配\n编译时对程序区未知，只有到运行，在进入某一个程序区块时候，才能为其分配内存。栈式内存符合先进后出\n### 3.堆式存储分配\n堆中的内存无法在编译时和运行时确定，可按任意顺序分配释放\n\n\n---\n\n\n","slug":"20160129-01","published":1,"updated":"2016-03-16T13:10:53.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ncj0006tgxg8ivxbb9e","content":"<p>java中内存也是大致有<strong>栈内存</strong>和<strong>堆内存</strong><br>当代码中定义一些基本类型变量或者引用变量，虚拟机会在<strong>栈</strong>中分配内存<br>然后到这个作用域结束，java会自动回收该部分内存<br>而当你要new对象或者数组，这块内存将会在<strong>堆</strong>里分配。这块内存会有java虚拟机来自动回收。<br>所谓的 <strong>引用变量</strong>，类似于 <strong>指针</strong>，是分配在栈内存当中的，然而指向堆内存。当一个new出来的对象没有再被引用指向的时候，就会被垃圾回收器在不定时清掉。</p>\n<h2 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h2><h3 id=\"1-静态存储分配\"><a href=\"#1-静态存储分配\" class=\"headerlink\" title=\"1.静态存储分配\"></a>1.静态存储分配</h3><p>在编译的时候就能确定每个数据目标的存储空间，不允许可变数据结构。</p>\n<h3 id=\"2-栈式存储分配\"><a href=\"#2-栈式存储分配\" class=\"headerlink\" title=\"2.栈式存储分配\"></a>2.栈式存储分配</h3><p>编译时对程序区未知，只有到运行，在进入某一个程序区块时候，才能为其分配内存。栈式内存符合先进后出</p>\n<h3 id=\"3-堆式存储分配\"><a href=\"#3-堆式存储分配\" class=\"headerlink\" title=\"3.堆式存储分配\"></a>3.堆式存储分配</h3><p>堆中的内存无法在编译时和运行时确定，可按任意顺序分配释放</p>\n<hr>\n","excerpt":"","more":"<p>java中内存也是大致有<strong>栈内存</strong>和<strong>堆内存</strong><br>当代码中定义一些基本类型变量或者引用变量，虚拟机会在<strong>栈</strong>中分配内存<br>然后到这个作用域结束，java会自动回收该部分内存<br>而当你要new对象或者数组，这块内存将会在<strong>堆</strong>里分配。这块内存会有java虚拟机来自动回收。<br>所谓的 <strong>引用变量</strong>，类似于 <strong>指针</strong>，是分配在栈内存当中的，然而指向堆内存。当一个new出来的对象没有再被引用指向的时候，就会被垃圾回收器在不定时清掉。</p>\n<h2 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h2><h3 id=\"1-静态存储分配\"><a href=\"#1-静态存储分配\" class=\"headerlink\" title=\"1.静态存储分配\"></a>1.静态存储分配</h3><p>在编译的时候就能确定每个数据目标的存储空间，不允许可变数据结构。</p>\n<h3 id=\"2-栈式存储分配\"><a href=\"#2-栈式存储分配\" class=\"headerlink\" title=\"2.栈式存储分配\"></a>2.栈式存储分配</h3><p>编译时对程序区未知，只有到运行，在进入某一个程序区块时候，才能为其分配内存。栈式内存符合先进后出</p>\n<h3 id=\"3-堆式存储分配\"><a href=\"#3-堆式存储分配\" class=\"headerlink\" title=\"3.堆式存储分配\"></a>3.堆式存储分配</h3><p>堆中的内存无法在编译时和运行时确定，可按任意顺序分配释放</p>\n<hr>\n"},{"title":"java中的注解","date":"2016-02-05T15:12:38.000Z","_content":"\n# java注解的基本定义\n根据维基百科\n> Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。\nJava语言中的类、方法、变量、参数和包等都可以被标注。Java标注和Javadoc不同，标注有自反性。在编译器生成类文件时，标注可以被嵌入到字节码中，由Java虚拟机执行时获取到标注。\n\n总之注解就是用于一种标记，在程序中加了注解就等于为程序打上了某种标记。程序可以利用java的反射机制来了解你的类及各种元素上有无何种标记，针对不同的标记，就去做相应的事件。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。\n","source":"_posts/20160205-01.md","raw":"---\ntitle: java中的注解\ndate: 2016-02-05 23:12:38\ntags: java\ncategories: java\n---\n\n# java注解的基本定义\n根据维基百科\n> Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。\nJava语言中的类、方法、变量、参数和包等都可以被标注。Java标注和Javadoc不同，标注有自反性。在编译器生成类文件时，标注可以被嵌入到字节码中，由Java虚拟机执行时获取到标注。\n\n总之注解就是用于一种标记，在程序中加了注解就等于为程序打上了某种标记。程序可以利用java的反射机制来了解你的类及各种元素上有无何种标记，针对不同的标记，就去做相应的事件。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。\n","slug":"20160205-01","published":1,"updated":"2016-03-18T04:34:30.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nck0007tgxgsx65o0ep","content":"<h1 id=\"java注解的基本定义\"><a href=\"#java注解的基本定义\" class=\"headerlink\" title=\"java注解的基本定义\"></a>java注解的基本定义</h1><p>根据维基百科</p>\n<blockquote>\n<p>Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。<br>Java语言中的类、方法、变量、参数和包等都可以被标注。Java标注和Javadoc不同，标注有自反性。在编译器生成类文件时，标注可以被嵌入到字节码中，由Java虚拟机执行时获取到标注。</p>\n</blockquote>\n<p>总之注解就是用于一种标记，在程序中加了注解就等于为程序打上了某种标记。程序可以利用java的反射机制来了解你的类及各种元素上有无何种标记，针对不同的标记，就去做相应的事件。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。</p>\n","excerpt":"","more":"<h1 id=\"java注解的基本定义\"><a href=\"#java注解的基本定义\" class=\"headerlink\" title=\"java注解的基本定义\"></a>java注解的基本定义</h1><p>根据维基百科</p>\n<blockquote>\n<p>Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。<br>Java语言中的类、方法、变量、参数和包等都可以被标注。Java标注和Javadoc不同，标注有自反性。在编译器生成类文件时，标注可以被嵌入到字节码中，由Java虚拟机执行时获取到标注。</p>\n</blockquote>\n<p>总之注解就是用于一种标记，在程序中加了注解就等于为程序打上了某种标记。程序可以利用java的反射机制来了解你的类及各种元素上有无何种标记，针对不同的标记，就去做相应的事件。标记可以加在包，类，字段，方法，方法的参数以及局部变量上。</p>\n"},{"title":"Android中的dp与sp","date":"2016-02-07T09:12:13.000Z","_content":"### dp\n\n我们的手机等设备是有一个实际尺寸的，比如1.5英寸*2英寸这样。这是绝对的单位，然后屏幕有分辨率，显示由像素点构成。这样就有像素密度这个概念了，我们可以得出一个公式\n> 像素密度 = 分辨率 / 实际长度(英寸为单位)\n\n好比 1.5*2 英寸的屏幕是 240\\*320 的，则她的像素密度是\n> 240 / 1.5 = 160 dpi(dots per Inch)\n\n所以不同的手机，里面显示的物体如果根据固定像素现实的话实际长度也可能是不同的，因为像素密度的不同，固定像素 * 像素密度 得到的实际长度当然不一样。而dp就是为了解决这个问题，在像素密度不同的手机设备中，dp会根据不同的系数因子转化。\n> Android系统定义了四种像素密度：低（120dpi）、中（160dpi）、高（240dpi）和超高（320dpi），它们对应的dp到px的系数分别为0.75、1、1.5和2，这个系数乘以dp长度就是像素数。\n\n### sp\n> 与缩放无关的抽象像素（Scale-independent Pixel）。sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp>1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。\n\n## 总结\n\n反正就是文字尺寸用sp，非文字尺寸用dp。就是如此","source":"_posts/20160207-01.md","raw":"---\n\ntitle: Android中的dp与sp\n\ndate: 2016-02-07 17:12:13\n\ntags: Android\n\ncategories: Android\n\n---\n### dp\n\n我们的手机等设备是有一个实际尺寸的，比如1.5英寸*2英寸这样。这是绝对的单位，然后屏幕有分辨率，显示由像素点构成。这样就有像素密度这个概念了，我们可以得出一个公式\n> 像素密度 = 分辨率 / 实际长度(英寸为单位)\n\n好比 1.5*2 英寸的屏幕是 240\\*320 的，则她的像素密度是\n> 240 / 1.5 = 160 dpi(dots per Inch)\n\n所以不同的手机，里面显示的物体如果根据固定像素现实的话实际长度也可能是不同的，因为像素密度的不同，固定像素 * 像素密度 得到的实际长度当然不一样。而dp就是为了解决这个问题，在像素密度不同的手机设备中，dp会根据不同的系数因子转化。\n> Android系统定义了四种像素密度：低（120dpi）、中（160dpi）、高（240dpi）和超高（320dpi），它们对应的dp到px的系数分别为0.75、1、1.5和2，这个系数乘以dp长度就是像素数。\n\n### sp\n> 与缩放无关的抽象像素（Scale-independent Pixel）。sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp>1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。\n\n## 总结\n\n反正就是文字尺寸用sp，非文字尺寸用dp。就是如此","slug":"20160207-01","published":1,"updated":"2016-03-19T14:22:53.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ncm0009tgxgbvqijnhy","content":"<h3 id=\"dp\"><a href=\"#dp\" class=\"headerlink\" title=\"dp\"></a>dp</h3><p>我们的手机等设备是有一个实际尺寸的，比如1.5英寸*2英寸这样。这是绝对的单位，然后屏幕有分辨率，显示由像素点构成。这样就有像素密度这个概念了，我们可以得出一个公式</p>\n<blockquote>\n<p>像素密度 = 分辨率 / 实际长度(英寸为单位)</p>\n</blockquote>\n<p>好比 1.5<em>2 英寸的屏幕是 240\\</em>320 的，则她的像素密度是</p>\n<blockquote>\n<p>240 / 1.5 = 160 dpi(dots per Inch)</p>\n</blockquote>\n<p>所以不同的手机，里面显示的物体如果根据固定像素现实的话实际长度也可能是不同的，因为像素密度的不同，固定像素 * 像素密度 得到的实际长度当然不一样。而dp就是为了解决这个问题，在像素密度不同的手机设备中，dp会根据不同的系数因子转化。</p>\n<blockquote>\n<p>Android系统定义了四种像素密度：低（120dpi）、中（160dpi）、高（240dpi）和超高（320dpi），它们对应的dp到px的系数分别为0.75、1、1.5和2，这个系数乘以dp长度就是像素数。</p>\n</blockquote>\n<h3 id=\"sp\"><a href=\"#sp\" class=\"headerlink\" title=\"sp\"></a>sp</h3><blockquote>\n<p>与缩放无关的抽象像素（Scale-independent Pixel）。sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp&gt;1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>反正就是文字尺寸用sp，非文字尺寸用dp。就是如此</p>\n","excerpt":"","more":"<h3 id=\"dp\"><a href=\"#dp\" class=\"headerlink\" title=\"dp\"></a>dp</h3><p>我们的手机等设备是有一个实际尺寸的，比如1.5英寸*2英寸这样。这是绝对的单位，然后屏幕有分辨率，显示由像素点构成。这样就有像素密度这个概念了，我们可以得出一个公式</p>\n<blockquote>\n<p>像素密度 = 分辨率 / 实际长度(英寸为单位)</p>\n</blockquote>\n<p>好比 1.5<em>2 英寸的屏幕是 240\\</em>320 的，则她的像素密度是</p>\n<blockquote>\n<p>240 / 1.5 = 160 dpi(dots per Inch)</p>\n</blockquote>\n<p>所以不同的手机，里面显示的物体如果根据固定像素现实的话实际长度也可能是不同的，因为像素密度的不同，固定像素 * 像素密度 得到的实际长度当然不一样。而dp就是为了解决这个问题，在像素密度不同的手机设备中，dp会根据不同的系数因子转化。</p>\n<blockquote>\n<p>Android系统定义了四种像素密度：低（120dpi）、中（160dpi）、高（240dpi）和超高（320dpi），它们对应的dp到px的系数分别为0.75、1、1.5和2，这个系数乘以dp长度就是像素数。</p>\n</blockquote>\n<h3 id=\"sp\"><a href=\"#sp\" class=\"headerlink\" title=\"sp\"></a>sp</h3><blockquote>\n<p>与缩放无关的抽象像素（Scale-independent Pixel）。sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp&gt;1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>反正就是文字尺寸用sp，非文字尺寸用dp。就是如此</p>\n"},{"title":"Android studio解决gradle下载慢的问题","date":"2016-03-23T12:10:12.000Z","_content":"\ngradle下载被墙是个很恶心的事情，半天构建不出来，所以解决下载慢，要不翻墙，要不只能引用一些国内的景象库来构建。我选择使用shadowsocks走代理的方法，shadowsocks怎么用我不再赘述，假设你已经配置好了shadowsocks并已经在浏览器中可以成功运行了。\n\n那只需在Android studio中，setting 的 http proxy下。如图配置即可\n\n{% asset_img example.jpg This is an example image %}","source":"_posts/20160323-01.md","raw":"---\ntitle: Android studio解决gradle下载慢的问题\ndate: 2016-03-23 20:10:12\ntags: 软件使用\ncategories: 软件使用\n\n---\n\ngradle下载被墙是个很恶心的事情，半天构建不出来，所以解决下载慢，要不翻墙，要不只能引用一些国内的景象库来构建。我选择使用shadowsocks走代理的方法，shadowsocks怎么用我不再赘述，假设你已经配置好了shadowsocks并已经在浏览器中可以成功运行了。\n\n那只需在Android studio中，setting 的 http proxy下。如图配置即可\n\n{% asset_img example.jpg This is an example image %}","slug":"20160323-01","published":1,"updated":"2016-03-23T12:18:38.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ncs000btgxgxjeslv5b","content":"<p>gradle下载被墙是个很恶心的事情，半天构建不出来，所以解决下载慢，要不翻墙，要不只能引用一些国内的景象库来构建。我选择使用shadowsocks走代理的方法，shadowsocks怎么用我不再赘述，假设你已经配置好了shadowsocks并已经在浏览器中可以成功运行了。</p>\n<p>那只需在Android studio中，setting 的 http proxy下。如图配置即可</p>\n<img src=\"/2016/03/23/20160323-01/example.jpg\" alt=\"This is an example image\" title=\"This is an example image\">","excerpt":"","more":"<p>gradle下载被墙是个很恶心的事情，半天构建不出来，所以解决下载慢，要不翻墙，要不只能引用一些国内的景象库来构建。我选择使用shadowsocks走代理的方法，shadowsocks怎么用我不再赘述，假设你已经配置好了shadowsocks并已经在浏览器中可以成功运行了。</p>\n<p>那只需在Android studio中，setting 的 http proxy下。如图配置即可</p>\n<img src=\"/2016/03/23/20160323-01/example.jpg\" alt=\"This is an example image\" title=\"This is an example image\">"},{"title":"java一些多进程知识点回顾","date":"2016-03-28T10:58:31.000Z","_content":"\n## 进程与线程\n\n进程有一个包含了程序内容和数据的地址空间，以及其它的资源，包括打开的文件、子进程和信号处理器等。不同进程的地址空间是互相隔离的。而线程表示的是程序的执行流程，是CPU调度的基本单位。线程有自己的程序计数器、寄存器、栈和帧等。引入线程的动机在于操作系统中阻塞式I/O的存在。当一个线程所执行的I/O被阻塞的时候，同一进程中的其它线程可以使用CPU来进行计算。这样的话，就提高了应用的执行效率。线程的概念在主流的操作系统和编程语言中都得到了支持。\n\n## 线程的生命周期\n\n一个线程存在不同的生命周期。如下图\n\n{% asset_img java-thread.jpg This is an example image %}\n\n\n - 新建状态\n>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n - 就绪状态\n>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n - 运行状态\n>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n - 阻塞状态\n>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。\n\n - 死亡状态\n>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n## java线程同步\n\n>在某个Java对象上面调用wait方法的时候，首先要检查当前线程是否获取到了这个对象上的锁。如果没有的话，就会直接抛出java.lang.IllegalMonitorStateException异常。如果有锁的话，就把当前线程添加到对象的等待集合中，并释放其所拥有的锁。当前线程被阻塞，无法继续执行，直到被从对象的等待集合中移除。引起某个线程从对象的等待集合中移除的原因有很多：对象上的notify方法被调用时，该线程被选中；对象上的notifyAll方法被调用；线程被中断；对于有超时限制的wait操作，当超过时间限制时；JVM内部实现在非正常情况下的操作。\n\n## volatile的用法\n\n>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其它线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其它内存操作一起重排序。Volatile变量不会被缓存在寄存器或者其它对处理器不可见的地方，因此在读取volatile类型的变量时，总会返回最新写入的值。\n\n其实也就是说，用volatile修饰的变量是不稳定的，经常要变动的，,编译器为了加快程序运行的速度,对一些变量的写操作会先在寄存器或者是CPU缓存上进行,最后才写入内存，volatile关键字保证不会被各种缓存机制优化，所以每次都可以直接去内存当中去读取出它的值。但是要注意，这就不能保证原子性了，只是提供了内存可见性。\n\n### 原子性\n>不管这个方法或者代码块被多少线程访问，方法和代码块中的语句只能作为一个整体执行，即当一个线程访问一个同步方法时，只有当方法执行完时，其他线程才能执行该方法。简单讲，就是一个线程一个线程来，而且必须全部执行完同步方法或代码块中的语句。\n\n### 内存可见性\n>这指的是一个线程在同步方法或者代码块中对共享变量做的任何改变，对随后的其他线程都是可见的\n\n因此可见，我们在对一个变量内存可见性高的时候应该使用这个关键字，经常需要读取出最新的值从内存中。并且需要注意的是，这个关键字**不能保证原子性（如++操作）**\n\n## 线程池的用法\n我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。\n\n## Executor 框架与线程池\n在 Java 5 之后，并发编程引入了一堆新的启动、调度和管理线程的API。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。\n\nJava里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n\n","source":"_posts/20160328-01.md","raw":"---\ntitle: java一些多进程知识点回顾\ndate: 2016-03-28 18:58:31\ntags: java\ncategories: java\n\n---\n\n## 进程与线程\n\n进程有一个包含了程序内容和数据的地址空间，以及其它的资源，包括打开的文件、子进程和信号处理器等。不同进程的地址空间是互相隔离的。而线程表示的是程序的执行流程，是CPU调度的基本单位。线程有自己的程序计数器、寄存器、栈和帧等。引入线程的动机在于操作系统中阻塞式I/O的存在。当一个线程所执行的I/O被阻塞的时候，同一进程中的其它线程可以使用CPU来进行计算。这样的话，就提高了应用的执行效率。线程的概念在主流的操作系统和编程语言中都得到了支持。\n\n## 线程的生命周期\n\n一个线程存在不同的生命周期。如下图\n\n{% asset_img java-thread.jpg This is an example image %}\n\n\n - 新建状态\n>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n - 就绪状态\n>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n - 运行状态\n>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n - 阻塞状态\n>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。\n\n - 死亡状态\n>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n## java线程同步\n\n>在某个Java对象上面调用wait方法的时候，首先要检查当前线程是否获取到了这个对象上的锁。如果没有的话，就会直接抛出java.lang.IllegalMonitorStateException异常。如果有锁的话，就把当前线程添加到对象的等待集合中，并释放其所拥有的锁。当前线程被阻塞，无法继续执行，直到被从对象的等待集合中移除。引起某个线程从对象的等待集合中移除的原因有很多：对象上的notify方法被调用时，该线程被选中；对象上的notifyAll方法被调用；线程被中断；对于有超时限制的wait操作，当超过时间限制时；JVM内部实现在非正常情况下的操作。\n\n## volatile的用法\n\n>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其它线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其它内存操作一起重排序。Volatile变量不会被缓存在寄存器或者其它对处理器不可见的地方，因此在读取volatile类型的变量时，总会返回最新写入的值。\n\n其实也就是说，用volatile修饰的变量是不稳定的，经常要变动的，,编译器为了加快程序运行的速度,对一些变量的写操作会先在寄存器或者是CPU缓存上进行,最后才写入内存，volatile关键字保证不会被各种缓存机制优化，所以每次都可以直接去内存当中去读取出它的值。但是要注意，这就不能保证原子性了，只是提供了内存可见性。\n\n### 原子性\n>不管这个方法或者代码块被多少线程访问，方法和代码块中的语句只能作为一个整体执行，即当一个线程访问一个同步方法时，只有当方法执行完时，其他线程才能执行该方法。简单讲，就是一个线程一个线程来，而且必须全部执行完同步方法或代码块中的语句。\n\n### 内存可见性\n>这指的是一个线程在同步方法或者代码块中对共享变量做的任何改变，对随后的其他线程都是可见的\n\n因此可见，我们在对一个变量内存可见性高的时候应该使用这个关键字，经常需要读取出最新的值从内存中。并且需要注意的是，这个关键字**不能保证原子性（如++操作）**\n\n## 线程池的用法\n我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。\n\n## Executor 框架与线程池\n在 Java 5 之后，并发编程引入了一堆新的启动、调度和管理线程的API。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。\n\nJava里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n\n","slug":"20160328-01","published":1,"updated":"2016-03-29T12:10:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ncu000etgxgzfais6mo","content":"<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>进程有一个包含了程序内容和数据的地址空间，以及其它的资源，包括打开的文件、子进程和信号处理器等。不同进程的地址空间是互相隔离的。而线程表示的是程序的执行流程，是CPU调度的基本单位。线程有自己的程序计数器、寄存器、栈和帧等。引入线程的动机在于操作系统中阻塞式I/O的存在。当一个线程所执行的I/O被阻塞的时候，同一进程中的其它线程可以使用CPU来进行计算。这样的话，就提高了应用的执行效率。线程的概念在主流的操作系统和编程语言中都得到了支持。</p>\n<h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><p>一个线程存在不同的生命周期。如下图</p>\n<img src=\"/2016/03/28/20160328-01/java-thread.jpg\" alt=\"This is an example image\" title=\"This is an example image\">\n<ul>\n<li><p>新建状态</p>\n<blockquote>\n<p>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p>\n</blockquote>\n</li>\n<li><p>就绪状态</p>\n<blockquote>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</blockquote>\n</li>\n<li><p>运行状态</p>\n<blockquote>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</blockquote>\n</li>\n<li><p>阻塞状态</p>\n<blockquote>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。</p>\n</blockquote>\n</li>\n<li><p>死亡状态</p>\n<blockquote>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"java线程同步\"><a href=\"#java线程同步\" class=\"headerlink\" title=\"java线程同步\"></a>java线程同步</h2><blockquote>\n<p>在某个Java对象上面调用wait方法的时候，首先要检查当前线程是否获取到了这个对象上的锁。如果没有的话，就会直接抛出java.lang.IllegalMonitorStateException异常。如果有锁的话，就把当前线程添加到对象的等待集合中，并释放其所拥有的锁。当前线程被阻塞，无法继续执行，直到被从对象的等待集合中移除。引起某个线程从对象的等待集合中移除的原因有很多：对象上的notify方法被调用时，该线程被选中；对象上的notifyAll方法被调用；线程被中断；对于有超时限制的wait操作，当超过时间限制时；JVM内部实现在非正常情况下的操作。</p>\n</blockquote>\n<h2 id=\"volatile的用法\"><a href=\"#volatile的用法\" class=\"headerlink\" title=\"volatile的用法\"></a>volatile的用法</h2><blockquote>\n<p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其它线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其它内存操作一起重排序。Volatile变量不会被缓存在寄存器或者其它对处理器不可见的地方，因此在读取volatile类型的变量时，总会返回最新写入的值。</p>\n</blockquote>\n<p>其实也就是说，用volatile修饰的变量是不稳定的，经常要变动的，,编译器为了加快程序运行的速度,对一些变量的写操作会先在寄存器或者是CPU缓存上进行,最后才写入内存，volatile关键字保证不会被各种缓存机制优化，所以每次都可以直接去内存当中去读取出它的值。但是要注意，这就不能保证原子性了，只是提供了内存可见性。</p>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><blockquote>\n<p>不管这个方法或者代码块被多少线程访问，方法和代码块中的语句只能作为一个整体执行，即当一个线程访问一个同步方法时，只有当方法执行完时，其他线程才能执行该方法。简单讲，就是一个线程一个线程来，而且必须全部执行完同步方法或代码块中的语句。</p>\n</blockquote>\n<h3 id=\"内存可见性\"><a href=\"#内存可见性\" class=\"headerlink\" title=\"内存可见性\"></a>内存可见性</h3><blockquote>\n<p>这指的是一个线程在同步方法或者代码块中对共享变量做的任何改变，对随后的其他线程都是可见的</p>\n</blockquote>\n<p>因此可见，我们在对一个变量内存可见性高的时候应该使用这个关键字，经常需要读取出最新的值从内存中。并且需要注意的是，这个关键字<strong>不能保证原子性（如++操作）</strong></p>\n<h2 id=\"线程池的用法\"><a href=\"#线程池的用法\" class=\"headerlink\" title=\"线程池的用法\"></a>线程池的用法</h2><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>\n<h2 id=\"Executor-框架与线程池\"><a href=\"#Executor-框架与线程池\" class=\"headerlink\" title=\"Executor 框架与线程池\"></a>Executor 框架与线程池</h2><p>在 Java 5 之后，并发编程引入了一堆新的启动、调度和管理线程的API。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。</p>\n<p>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。</p>\n","excerpt":"","more":"<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>进程有一个包含了程序内容和数据的地址空间，以及其它的资源，包括打开的文件、子进程和信号处理器等。不同进程的地址空间是互相隔离的。而线程表示的是程序的执行流程，是CPU调度的基本单位。线程有自己的程序计数器、寄存器、栈和帧等。引入线程的动机在于操作系统中阻塞式I/O的存在。当一个线程所执行的I/O被阻塞的时候，同一进程中的其它线程可以使用CPU来进行计算。这样的话，就提高了应用的执行效率。线程的概念在主流的操作系统和编程语言中都得到了支持。</p>\n<h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><p>一个线程存在不同的生命周期。如下图</p>\n<img src=\"/2016/03/28/20160328-01/java-thread.jpg\" alt=\"This is an example image\" title=\"This is an example image\">\n<ul>\n<li><p>新建状态</p>\n<blockquote>\n<p>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p>\n</blockquote>\n</li>\n<li><p>就绪状态</p>\n<blockquote>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</blockquote>\n</li>\n<li><p>运行状态</p>\n<blockquote>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</blockquote>\n</li>\n<li><p>阻塞状态</p>\n<blockquote>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。</p>\n</blockquote>\n</li>\n<li><p>死亡状态</p>\n<blockquote>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"java线程同步\"><a href=\"#java线程同步\" class=\"headerlink\" title=\"java线程同步\"></a>java线程同步</h2><blockquote>\n<p>在某个Java对象上面调用wait方法的时候，首先要检查当前线程是否获取到了这个对象上的锁。如果没有的话，就会直接抛出java.lang.IllegalMonitorStateException异常。如果有锁的话，就把当前线程添加到对象的等待集合中，并释放其所拥有的锁。当前线程被阻塞，无法继续执行，直到被从对象的等待集合中移除。引起某个线程从对象的等待集合中移除的原因有很多：对象上的notify方法被调用时，该线程被选中；对象上的notifyAll方法被调用；线程被中断；对于有超时限制的wait操作，当超过时间限制时；JVM内部实现在非正常情况下的操作。</p>\n</blockquote>\n<h2 id=\"volatile的用法\"><a href=\"#volatile的用法\" class=\"headerlink\" title=\"volatile的用法\"></a>volatile的用法</h2><blockquote>\n<p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其它线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其它内存操作一起重排序。Volatile变量不会被缓存在寄存器或者其它对处理器不可见的地方，因此在读取volatile类型的变量时，总会返回最新写入的值。</p>\n</blockquote>\n<p>其实也就是说，用volatile修饰的变量是不稳定的，经常要变动的，,编译器为了加快程序运行的速度,对一些变量的写操作会先在寄存器或者是CPU缓存上进行,最后才写入内存，volatile关键字保证不会被各种缓存机制优化，所以每次都可以直接去内存当中去读取出它的值。但是要注意，这就不能保证原子性了，只是提供了内存可见性。</p>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><blockquote>\n<p>不管这个方法或者代码块被多少线程访问，方法和代码块中的语句只能作为一个整体执行，即当一个线程访问一个同步方法时，只有当方法执行完时，其他线程才能执行该方法。简单讲，就是一个线程一个线程来，而且必须全部执行完同步方法或代码块中的语句。</p>\n</blockquote>\n<h3 id=\"内存可见性\"><a href=\"#内存可见性\" class=\"headerlink\" title=\"内存可见性\"></a>内存可见性</h3><blockquote>\n<p>这指的是一个线程在同步方法或者代码块中对共享变量做的任何改变，对随后的其他线程都是可见的</p>\n</blockquote>\n<p>因此可见，我们在对一个变量内存可见性高的时候应该使用这个关键字，经常需要读取出最新的值从内存中。并且需要注意的是，这个关键字<strong>不能保证原子性（如++操作）</strong></p>\n<h2 id=\"线程池的用法\"><a href=\"#线程池的用法\" class=\"headerlink\" title=\"线程池的用法\"></a>线程池的用法</h2><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>\n<h2 id=\"Executor-框架与线程池\"><a href=\"#Executor-框架与线程池\" class=\"headerlink\" title=\"Executor 框架与线程池\"></a>Executor 框架与线程池</h2><p>在 Java 5 之后，并发编程引入了一堆新的启动、调度和管理线程的API。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。</p>\n<p>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。</p>\n"},{"title":"图片异步加载","date":"2016-03-24T13:22:51.000Z","_content":"\n当我们安卓系统要去加载一大堆的图片的时候，情况会变得比较复杂，很容易出现OOM内存溢出。为了保证不发生这种情况，通常会进行垃圾回收，但是同时也要考虑重新滑回图片时的情况，所以基于此，必须使用好内存缓存技术。\n\n根据资料，以往我们可能会使用软引用技术去处理，不过现在我们不推荐使用那个了。现在谷歌有LruCache这个核心类并且已经加入到了v4包里面，这个类很适合用来缓存图片。\n\n这里还要来讲几个东西。\n#### LinkedHashMap\n继承了HashMap，但同时他也是个双向链表，具有可预知的迭代顺序。其数组中的保存元素Entry除了保存对象引用之外，还保存了上一个元素before和下一个元素after。其提取有两种顺序，一种是按照访问顺序提取，一种是按照插入顺序提取。很适合用于LRU缓存机制。\n\n#### LRU缓存机制\nLRU是Least Recently Used 的缩写，翻译过来就是“最近最少使用”，也就是说，LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance.\n\n要实现LRU缓存，我们首先要用到一个类 LinkedHashMap。 用这个类有两大好处：一是它本身已经实现了按照访问顺序的存储，也就是说，最近读取的会放在最前面，最最不常读取的会放在最后（当然，它也可以实现按照插入顺序存储）。第二，LinkedHashMap本身有一个方法用于判断是否需要移除最不常读取的数\n\n因此我们指导安卓里的LruCache这个核心类就是基于LinkedHashMap实现的。\n","source":"_posts/20160324-03.md","raw":"---\ntitle: 图片异步加载\ndate: 2016-03-24 21:22:51\ntags: Android\ncategories: Android\n\n---\n\n当我们安卓系统要去加载一大堆的图片的时候，情况会变得比较复杂，很容易出现OOM内存溢出。为了保证不发生这种情况，通常会进行垃圾回收，但是同时也要考虑重新滑回图片时的情况，所以基于此，必须使用好内存缓存技术。\n\n根据资料，以往我们可能会使用软引用技术去处理，不过现在我们不推荐使用那个了。现在谷歌有LruCache这个核心类并且已经加入到了v4包里面，这个类很适合用来缓存图片。\n\n这里还要来讲几个东西。\n#### LinkedHashMap\n继承了HashMap，但同时他也是个双向链表，具有可预知的迭代顺序。其数组中的保存元素Entry除了保存对象引用之外，还保存了上一个元素before和下一个元素after。其提取有两种顺序，一种是按照访问顺序提取，一种是按照插入顺序提取。很适合用于LRU缓存机制。\n\n#### LRU缓存机制\nLRU是Least Recently Used 的缩写，翻译过来就是“最近最少使用”，也就是说，LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance.\n\n要实现LRU缓存，我们首先要用到一个类 LinkedHashMap。 用这个类有两大好处：一是它本身已经实现了按照访问顺序的存储，也就是说，最近读取的会放在最前面，最最不常读取的会放在最后（当然，它也可以实现按照插入顺序存储）。第二，LinkedHashMap本身有一个方法用于判断是否需要移除最不常读取的数\n\n因此我们指导安卓里的LruCache这个核心类就是基于LinkedHashMap实现的。\n","slug":"20160324-03","published":1,"updated":"2016-03-24T14:41:17.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ncz000itgxgnyfvb3ix","content":"<p>当我们安卓系统要去加载一大堆的图片的时候，情况会变得比较复杂，很容易出现OOM内存溢出。为了保证不发生这种情况，通常会进行垃圾回收，但是同时也要考虑重新滑回图片时的情况，所以基于此，必须使用好内存缓存技术。</p>\n<p>根据资料，以往我们可能会使用软引用技术去处理，不过现在我们不推荐使用那个了。现在谷歌有LruCache这个核心类并且已经加入到了v4包里面，这个类很适合用来缓存图片。</p>\n<p>这里还要来讲几个东西。</p>\n<h4 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h4><p>继承了HashMap，但同时他也是个双向链表，具有可预知的迭代顺序。其数组中的保存元素Entry除了保存对象引用之外，还保存了上一个元素before和下一个元素after。其提取有两种顺序，一种是按照访问顺序提取，一种是按照插入顺序提取。很适合用于LRU缓存机制。</p>\n<h4 id=\"LRU缓存机制\"><a href=\"#LRU缓存机制\" class=\"headerlink\" title=\"LRU缓存机制\"></a>LRU缓存机制</h4><p>LRU是Least Recently Used 的缩写，翻译过来就是“最近最少使用”，也就是说，LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance.</p>\n<p>要实现LRU缓存，我们首先要用到一个类 LinkedHashMap。 用这个类有两大好处：一是它本身已经实现了按照访问顺序的存储，也就是说，最近读取的会放在最前面，最最不常读取的会放在最后（当然，它也可以实现按照插入顺序存储）。第二，LinkedHashMap本身有一个方法用于判断是否需要移除最不常读取的数</p>\n<p>因此我们指导安卓里的LruCache这个核心类就是基于LinkedHashMap实现的。</p>\n","excerpt":"","more":"<p>当我们安卓系统要去加载一大堆的图片的时候，情况会变得比较复杂，很容易出现OOM内存溢出。为了保证不发生这种情况，通常会进行垃圾回收，但是同时也要考虑重新滑回图片时的情况，所以基于此，必须使用好内存缓存技术。</p>\n<p>根据资料，以往我们可能会使用软引用技术去处理，不过现在我们不推荐使用那个了。现在谷歌有LruCache这个核心类并且已经加入到了v4包里面，这个类很适合用来缓存图片。</p>\n<p>这里还要来讲几个东西。</p>\n<h4 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h4><p>继承了HashMap，但同时他也是个双向链表，具有可预知的迭代顺序。其数组中的保存元素Entry除了保存对象引用之外，还保存了上一个元素before和下一个元素after。其提取有两种顺序，一种是按照访问顺序提取，一种是按照插入顺序提取。很适合用于LRU缓存机制。</p>\n<h4 id=\"LRU缓存机制\"><a href=\"#LRU缓存机制\" class=\"headerlink\" title=\"LRU缓存机制\"></a>LRU缓存机制</h4><p>LRU是Least Recently Used 的缩写，翻译过来就是“最近最少使用”，也就是说，LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance.</p>\n<p>要实现LRU缓存，我们首先要用到一个类 LinkedHashMap。 用这个类有两大好处：一是它本身已经实现了按照访问顺序的存储，也就是说，最近读取的会放在最前面，最最不常读取的会放在最后（当然，它也可以实现按照插入顺序存储）。第二，LinkedHashMap本身有一个方法用于判断是否需要移除最不常读取的数</p>\n<p>因此我们指导安卓里的LruCache这个核心类就是基于LinkedHashMap实现的。</p>\n"},{"title":"java泛型的一些理解与笔记","date":"2016-03-24T10:15:09.000Z","_content":"\n都知道ArrayList是基于List接口实现的，HashMap是基于Map接口实现的。我们在编程的时候都尽量用List和Map来定义变量，这样就实现了面相接口编程，修改的时候也更加灵活。\n\n现在来说说HashMap，它是map类的实现，当它接受一个key-value键值对的时候，它会把key对象做hashcode处理，hashCode()是每个Object都具备的方法，hashcode计算出来后用与作存储位置，而对应的value存在那个地方即可。这就是hashMap的简单原理。\n\n在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。 当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。而在Hashtable中，无论是key还是value都不能为null 。","source":"_posts/20160324-01.md","raw":"---\ntitle: java泛型的一些理解与笔记\ndate: 2016-03-24 18:15:09\ntags: java\ncategories: java\n\n---\n\n都知道ArrayList是基于List接口实现的，HashMap是基于Map接口实现的。我们在编程的时候都尽量用List和Map来定义变量，这样就实现了面相接口编程，修改的时候也更加灵活。\n\n现在来说说HashMap，它是map类的实现，当它接受一个key-value键值对的时候，它会把key对象做hashcode处理，hashCode()是每个Object都具备的方法，hashcode计算出来后用与作存储位置，而对应的value存在那个地方即可。这就是hashMap的简单原理。\n\n在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。 当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。而在Hashtable中，无论是key还是value都不能为null 。","slug":"20160324-01","published":1,"updated":"2016-03-24T14:19:58.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nd1000ltgxgc1cjrkff","content":"<p>都知道ArrayList是基于List接口实现的，HashMap是基于Map接口实现的。我们在编程的时候都尽量用List和Map来定义变量，这样就实现了面相接口编程，修改的时候也更加灵活。</p>\n<p>现在来说说HashMap，它是map类的实现，当它接受一个key-value键值对的时候，它会把key对象做hashcode处理，hashCode()是每个Object都具备的方法，hashcode计算出来后用与作存储位置，而对应的value存在那个地方即可。这就是hashMap的简单原理。</p>\n<p>在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。 当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。而在Hashtable中，无论是key还是value都不能为null 。</p>\n","excerpt":"","more":"<p>都知道ArrayList是基于List接口实现的，HashMap是基于Map接口实现的。我们在编程的时候都尽量用List和Map来定义变量，这样就实现了面相接口编程，修改的时候也更加灵活。</p>\n<p>现在来说说HashMap，它是map类的实现，当它接受一个key-value键值对的时候，它会把key对象做hashcode处理，hashCode()是每个Object都具备的方法，hashcode计算出来后用与作存储位置，而对应的value存在那个地方即可。这就是hashMap的简单原理。</p>\n<p>在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。 当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。而在Hashtable中，无论是key还是value都不能为null 。</p>\n"},{"title":"java虚拟机笔记(1):java内存区域","date":"2016-04-08T14:14:37.000Z","_content":"\n## 运行时数据区域\n\njava虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。\n\n\n{% asset_img memory.jpg This is an example image %}\n\n### 程序计数器\n程序计数器是一个较小的内存空间，当前线程的字节码指示器，工作时通过改变这个计数器的值选取下一条需要执行的字节码指令\n\n每隔线程都需要一个独立的程序计数器，各线程互不影响，这块内存为**线程私有内存**\n\n此区域是唯一一在java虚拟机规范中没有规定任何OOM情况的区域\n\n### java虚拟机栈\n线程私有，生命周期与线程相同。每个方法在执行时都会创建一个栈帧(Stack Frame),用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每个方法调用到执行完成的过程对应这一个栈帧在虚拟机栈中入栈到出栈。\n\n局部变量表里存放了编译期可知的各种基本数据类型(boolean byte char short int float double long)还有对象引用(reference)\n\n当进入一个方法时，这个方法需要在帧中分配多大的局部空间是完全确定的在方法运行期间不会改变局部变量表的大小。","source":"_posts/20160408-01.md","raw":"---\ntitle: java虚拟机笔记(1):java内存区域\ndate: 2016-04-08 22:14:37\ntags: java java虚拟机\ncategories: java\n\n---\n\n## 运行时数据区域\n\njava虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。\n\n\n{% asset_img memory.jpg This is an example image %}\n\n### 程序计数器\n程序计数器是一个较小的内存空间，当前线程的字节码指示器，工作时通过改变这个计数器的值选取下一条需要执行的字节码指令\n\n每隔线程都需要一个独立的程序计数器，各线程互不影响，这块内存为**线程私有内存**\n\n此区域是唯一一在java虚拟机规范中没有规定任何OOM情况的区域\n\n### java虚拟机栈\n线程私有，生命周期与线程相同。每个方法在执行时都会创建一个栈帧(Stack Frame),用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每个方法调用到执行完成的过程对应这一个栈帧在虚拟机栈中入栈到出栈。\n\n局部变量表里存放了编译期可知的各种基本数据类型(boolean byte char short int float double long)还有对象引用(reference)\n\n当进入一个方法时，这个方法需要在帧中分配多大的局部空间是完全确定的在方法运行期间不会改变局部变量表的大小。","slug":"20160408-01","published":1,"updated":"2016-04-08T14:44:16.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nd4000qtgxgytc7gyee","content":"<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p>java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。</p>\n<img src=\"/2016/04/08/20160408-01/memory.jpg\" alt=\"This is an example image\" title=\"This is an example image\">\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器是一个较小的内存空间，当前线程的字节码指示器，工作时通过改变这个计数器的值选取下一条需要执行的字节码指令</p>\n<p>每隔线程都需要一个独立的程序计数器，各线程互不影响，这块内存为<strong>线程私有内存</strong></p>\n<p>此区域是唯一一在java虚拟机规范中没有规定任何OOM情况的区域</p>\n<h3 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h3><p>线程私有，生命周期与线程相同。每个方法在执行时都会创建一个栈帧(Stack Frame),用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每个方法调用到执行完成的过程对应这一个栈帧在虚拟机栈中入栈到出栈。</p>\n<p>局部变量表里存放了编译期可知的各种基本数据类型(boolean byte char short int float double long)还有对象引用(reference)</p>\n<p>当进入一个方法时，这个方法需要在帧中分配多大的局部空间是完全确定的在方法运行期间不会改变局部变量表的大小。</p>\n","excerpt":"","more":"<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p>java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。</p>\n<img src=\"/2016/04/08/20160408-01/memory.jpg\" alt=\"This is an example image\" title=\"This is an example image\">\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器是一个较小的内存空间，当前线程的字节码指示器，工作时通过改变这个计数器的值选取下一条需要执行的字节码指令</p>\n<p>每隔线程都需要一个独立的程序计数器，各线程互不影响，这块内存为<strong>线程私有内存</strong></p>\n<p>此区域是唯一一在java虚拟机规范中没有规定任何OOM情况的区域</p>\n<h3 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h3><p>线程私有，生命周期与线程相同。每个方法在执行时都会创建一个栈帧(Stack Frame),用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每个方法调用到执行完成的过程对应这一个栈帧在虚拟机栈中入栈到出栈。</p>\n<p>局部变量表里存放了编译期可知的各种基本数据类型(boolean byte char short int float double long)还有对象引用(reference)</p>\n<p>当进入一个方法时，这个方法需要在帧中分配多大的局部空间是完全确定的在方法运行期间不会改变局部变量表的大小。</p>\n"},{"title":"java里的可达性和各种引用","date":"2016-03-24T12:17:39.000Z","_content":"\n最近在学习Android中遇到了图片加载内存溢出的问题，所以顺便学习java虚拟机里的一些内存回收机制。\n\n### 可达性\njava虚拟机中有五个级别的可达性。\n\n - 强可达\n\n强可达所使用的对象，通常而言不会被GC回收。那些直接被new出来使用的对象就是强可达， 一个对象可以被一些线程直接使用而不通过其他引用对象，就是强可达。\n\n - 软可达\n\n>  如果一个对象没有强可达性，但是它可以通过一个软引用(soft reference.)来使用，那么它就具有软可达性。只有当系统需要更多内存时，GC才会回收具有软可达性的对象。在内存不足前，GC保证一定回收软可达的对象。\n\n就是说，软引用对象的回收去决定于不同版本JVM的回收机制，回收之后软引用会返回null。\n\n - 弱可达\n\n> 如果一个对象既没有强可达性，也没有软可达性，但是它可以通过一个弱引用(weak reference)来使用，那么他就具有弱可达性。当弱引用指向的弱可达对象没有其他的引用，那么这个对象就会被回收。\n\n - 虚可达\n>如果一个对象既没有强可达性，也没有软可达性、弱可达性，他已经被终结（finalized），并且有一些虚引用（phantom reference）指向它，那么它就具有虚可达性。\n\n就是说虚引用指向的对象已经被终结了，永远返回null。\n\n - 不可达\n>当一个对象不能通过以上的方式指向，那么这个对象就变得不可达，并因此适合被回收。\n\n\n### 引用的类型\nJDK1.2之后，对象引用被分为四个级别。\n\n - 强引用\n\n垃圾回收器不回收强引用，如若内存空间不足，jvm将会OOM错误。\n\n - 软引用\n\n够空间就不回收，不够就回。可用于实现内存敏感的高速缓存\n\n - 弱引用\n\n对象若是有弱引用，那将具有更短的生命周期，一旦它被扫描到，不管内存空间是否充足都会被回收，不过由于垃圾回收器是个级别很低的线程，所以不一定会很快发现弱引用对象。\n\n - 虚引用\n\n形同虚设，并不决定对象生命周期，主要用来跟踪对象被GC回收的活动。\n\n","source":"_posts/20160324-02.md","raw":"---\ntitle: java里的可达性和各种引用\ndate: 2016-03-24 20:17:39\ntags: java\ncategories: java\n\n---\n\n最近在学习Android中遇到了图片加载内存溢出的问题，所以顺便学习java虚拟机里的一些内存回收机制。\n\n### 可达性\njava虚拟机中有五个级别的可达性。\n\n - 强可达\n\n强可达所使用的对象，通常而言不会被GC回收。那些直接被new出来使用的对象就是强可达， 一个对象可以被一些线程直接使用而不通过其他引用对象，就是强可达。\n\n - 软可达\n\n>  如果一个对象没有强可达性，但是它可以通过一个软引用(soft reference.)来使用，那么它就具有软可达性。只有当系统需要更多内存时，GC才会回收具有软可达性的对象。在内存不足前，GC保证一定回收软可达的对象。\n\n就是说，软引用对象的回收去决定于不同版本JVM的回收机制，回收之后软引用会返回null。\n\n - 弱可达\n\n> 如果一个对象既没有强可达性，也没有软可达性，但是它可以通过一个弱引用(weak reference)来使用，那么他就具有弱可达性。当弱引用指向的弱可达对象没有其他的引用，那么这个对象就会被回收。\n\n - 虚可达\n>如果一个对象既没有强可达性，也没有软可达性、弱可达性，他已经被终结（finalized），并且有一些虚引用（phantom reference）指向它，那么它就具有虚可达性。\n\n就是说虚引用指向的对象已经被终结了，永远返回null。\n\n - 不可达\n>当一个对象不能通过以上的方式指向，那么这个对象就变得不可达，并因此适合被回收。\n\n\n### 引用的类型\nJDK1.2之后，对象引用被分为四个级别。\n\n - 强引用\n\n垃圾回收器不回收强引用，如若内存空间不足，jvm将会OOM错误。\n\n - 软引用\n\n够空间就不回收，不够就回。可用于实现内存敏感的高速缓存\n\n - 弱引用\n\n对象若是有弱引用，那将具有更短的生命周期，一旦它被扫描到，不管内存空间是否充足都会被回收，不过由于垃圾回收器是个级别很低的线程，所以不一定会很快发现弱引用对象。\n\n - 虚引用\n\n形同虚设，并不决定对象生命周期，主要用来跟踪对象被GC回收的活动。\n\n","slug":"20160324-02","published":1,"updated":"2016-03-29T12:39:46.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7ndb000stgxgdrxxjs4v","content":"<p>最近在学习Android中遇到了图片加载内存溢出的问题，所以顺便学习java虚拟机里的一些内存回收机制。</p>\n<h3 id=\"可达性\"><a href=\"#可达性\" class=\"headerlink\" title=\"可达性\"></a>可达性</h3><p>java虚拟机中有五个级别的可达性。</p>\n<ul>\n<li>强可达</li>\n</ul>\n<p>强可达所使用的对象，通常而言不会被GC回收。那些直接被new出来使用的对象就是强可达， 一个对象可以被一些线程直接使用而不通过其他引用对象，就是强可达。</p>\n<ul>\n<li>软可达</li>\n</ul>\n<blockquote>\n<p> 如果一个对象没有强可达性，但是它可以通过一个软引用(soft reference.)来使用，那么它就具有软可达性。只有当系统需要更多内存时，GC才会回收具有软可达性的对象。在内存不足前，GC保证一定回收软可达的对象。</p>\n</blockquote>\n<p>就是说，软引用对象的回收去决定于不同版本JVM的回收机制，回收之后软引用会返回null。</p>\n<ul>\n<li>弱可达</li>\n</ul>\n<blockquote>\n<p>如果一个对象既没有强可达性，也没有软可达性，但是它可以通过一个弱引用(weak reference)来使用，那么他就具有弱可达性。当弱引用指向的弱可达对象没有其他的引用，那么这个对象就会被回收。</p>\n</blockquote>\n<ul>\n<li>虚可达<blockquote>\n<p>如果一个对象既没有强可达性，也没有软可达性、弱可达性，他已经被终结（finalized），并且有一些虚引用（phantom reference）指向它，那么它就具有虚可达性。</p>\n</blockquote>\n</li>\n</ul>\n<p>就是说虚引用指向的对象已经被终结了，永远返回null。</p>\n<ul>\n<li>不可达<blockquote>\n<p>当一个对象不能通过以上的方式指向，那么这个对象就变得不可达，并因此适合被回收。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"引用的类型\"><a href=\"#引用的类型\" class=\"headerlink\" title=\"引用的类型\"></a>引用的类型</h3><p>JDK1.2之后，对象引用被分为四个级别。</p>\n<ul>\n<li>强引用</li>\n</ul>\n<p>垃圾回收器不回收强引用，如若内存空间不足，jvm将会OOM错误。</p>\n<ul>\n<li>软引用</li>\n</ul>\n<p>够空间就不回收，不够就回。可用于实现内存敏感的高速缓存</p>\n<ul>\n<li>弱引用</li>\n</ul>\n<p>对象若是有弱引用，那将具有更短的生命周期，一旦它被扫描到，不管内存空间是否充足都会被回收，不过由于垃圾回收器是个级别很低的线程，所以不一定会很快发现弱引用对象。</p>\n<ul>\n<li>虚引用</li>\n</ul>\n<p>形同虚设，并不决定对象生命周期，主要用来跟踪对象被GC回收的活动。</p>\n","excerpt":"","more":"<p>最近在学习Android中遇到了图片加载内存溢出的问题，所以顺便学习java虚拟机里的一些内存回收机制。</p>\n<h3 id=\"可达性\"><a href=\"#可达性\" class=\"headerlink\" title=\"可达性\"></a>可达性</h3><p>java虚拟机中有五个级别的可达性。</p>\n<ul>\n<li>强可达</li>\n</ul>\n<p>强可达所使用的对象，通常而言不会被GC回收。那些直接被new出来使用的对象就是强可达， 一个对象可以被一些线程直接使用而不通过其他引用对象，就是强可达。</p>\n<ul>\n<li>软可达</li>\n</ul>\n<blockquote>\n<p> 如果一个对象没有强可达性，但是它可以通过一个软引用(soft reference.)来使用，那么它就具有软可达性。只有当系统需要更多内存时，GC才会回收具有软可达性的对象。在内存不足前，GC保证一定回收软可达的对象。</p>\n</blockquote>\n<p>就是说，软引用对象的回收去决定于不同版本JVM的回收机制，回收之后软引用会返回null。</p>\n<ul>\n<li>弱可达</li>\n</ul>\n<blockquote>\n<p>如果一个对象既没有强可达性，也没有软可达性，但是它可以通过一个弱引用(weak reference)来使用，那么他就具有弱可达性。当弱引用指向的弱可达对象没有其他的引用，那么这个对象就会被回收。</p>\n</blockquote>\n<ul>\n<li>虚可达<blockquote>\n<p>如果一个对象既没有强可达性，也没有软可达性、弱可达性，他已经被终结（finalized），并且有一些虚引用（phantom reference）指向它，那么它就具有虚可达性。</p>\n</blockquote>\n</li>\n</ul>\n<p>就是说虚引用指向的对象已经被终结了，永远返回null。</p>\n<ul>\n<li>不可达<blockquote>\n<p>当一个对象不能通过以上的方式指向，那么这个对象就变得不可达，并因此适合被回收。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"引用的类型\"><a href=\"#引用的类型\" class=\"headerlink\" title=\"引用的类型\"></a>引用的类型</h3><p>JDK1.2之后，对象引用被分为四个级别。</p>\n<ul>\n<li>强引用</li>\n</ul>\n<p>垃圾回收器不回收强引用，如若内存空间不足，jvm将会OOM错误。</p>\n<ul>\n<li>软引用</li>\n</ul>\n<p>够空间就不回收，不够就回。可用于实现内存敏感的高速缓存</p>\n<ul>\n<li>弱引用</li>\n</ul>\n<p>对象若是有弱引用，那将具有更短的生命周期，一旦它被扫描到，不管内存空间是否充足都会被回收，不过由于垃圾回收器是个级别很低的线程，所以不一定会很快发现弱引用对象。</p>\n<ul>\n<li>虚引用</li>\n</ul>\n<p>形同虚设，并不决定对象生命周期，主要用来跟踪对象被GC回收的活动。</p>\n"},{"title":"安卓实战学习记录01","date":"2016-03-20T15:28:52.000Z","_content":"\n---\n\n## 顶部导航和左右滑动抽屉\n\n#### Toolbar\n\n跟导航栏有关则有**Actionbar**和**Toolbar** 查阅资料可知，Toolbar是在API21后引进的，放在v7库当中，是应用的内容标准工具栏，而**Actionbar**一些方法已经标注过时了。相比于**Actionbar**，它变得更加自由。\n\n使用Toolbar要先把主题样式里的Actionbar去掉，在manifest中\n\n    android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\">\n\n\n此外toolbar 是没有tab的，他需要结合support库里的tablayout来完成原来actionbar里的tab功能。除此之外，你在使用toolbar的时候要先屏蔽掉\n\n定义好xml文件后，我们在java文件中引入toolbar这个类\n\n``` java\nprivate android.support.v7.widget.Toolbar toolbar;\n```\n\n这里注意要引用supportv7的包，否则会出错，Toolbar向下兼容，这样才可以接着调用**setSupportActionBar**\n\n\n``` java\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    oolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.mytoolbar);\n    setSupportActionBar(toolbar);\n    }\n\n```\n\ntoolbar很灵活，因为它就是一个viewgroup。如果要显示navigationicon，也许最好的做法是把它在代码中进行set，因为xml中的设置可能要API21以上才能看见\n\n\n#### DrawerLayout\n官方在13年发布的一个布局，用以创建侧滑菜单。从此我们可以不需要使用github上的侧滑菜单项目了。要创建一个DrawerLayout，我们必须要把它定为根视图，这样再把主要视图作为第一个子节点放入\n\n\n#### CoordinatorLayout\n\n根据谷歌的官方文档\n>CoordinatorLayout is a super-powered FrameLayout.\n\n可以看到它真是super-powered\nCoordinatorLayout一般用于顶层布局和协调子布局。\n要使用它必须在Gradle把包引进来。\n\n``` java\ncompile 'com.android.support:design:23.1.1' \n```\n由于CoordinatorLayout基于FrameLayout，所以这里也提一下FrameLayout，并且再提一下待会用到的几个layout\n##### FrameLayout\n\n帧布局FrameLayout在Android的五大布局中是最简单的布局方式，在需要布局中的控件有重叠的情况下才使用。FrameLayout中的控件layout\\_margin设置要依赖layout\\_gravity属性，否则layout_margin设置无效。如果想要控件正常显示，可以将控件的layout\\_gravity设置为top,以屏幕左上角为参考点。\n\n\n##### AppBarLayout\n>AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures.\n\n经常用来实现一线滑动效果并且经常和CoordinatorLayout配套使用\n\n##### TabLayout\n这也是谷歌推出的新控件，可以很方便的用来作标签导航。结合ViewPager一起使用能有很好的效果。\n\n### 标签页的具体实现\n\n标签页的主角毫无疑问就是TabLayout了。我们现在xml文件中定义TabLayout。\n\n\n``` java\n<android.support.design.widget.TabLayout\n   android:id=\"@+id/tabs\"\n   android:layout_width=\"match_parent\"\n   ndroid:layout_height=\"wrap_content\">\n\n```\n\n定义了之后就已经可以标签名之类的属性了。但是我们的目的是标签分页实现之后跳转到不同的Fragment。所以我们还得使用一个ViewPager跟TabLayout配套使用。要使得标签跳转，可以直接用**FragmentPagerAdapter** 跟TabLayout配套使用。这样这个Adapter就同时控制了TabLayout和ViewPager并使他们数据同步。\n``` java\n        <android.support.v4.view.ViewPager\n            android:id=\"@+id/myviewpager\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        </android.support.v4.view.ViewPager>\n```\n\n接下来是代码部分了\n``` java\n        TabLayout mTabLayout = (TabLayout) findViewById(R.id.tabs);\n\n        //取得一个自定义PagerAdapter的实例\n        mAdapter = new TabPagerAdapter(getSupportFragmentManager());\n        mViewPager = (ViewPager) findViewById(R.id.myviewpager);\n\n        //讲ViewPager和Adapter绑定起来获得数据\n        mViewPager.setAdapter(mAdapter);\n\n        //一站式同步，将TabLayout和PagerAdapter绑定起来\n        mTabLayout.setupWithViewPager(mViewPager);\n\n```\n\nPagerAdapter的定义可以去查看官方文档。需要实现两个方法。一个是**getItem**方法，用来根据position返回不同的Fragment。getCount方法用来返回标签的个数，而getPagerTitle方法可以获得页面对应的标签。代码把这些定义好就可以成功了。\n\n### 抽屉效果的实现\n首先得在xml定义一个 **DrawerLayout** ，然后第一个子节点是本体要显示的内容maincontent，然后之后放入一个**NavigationView**来做Menu。\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\">\n\n    <include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"\n        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"\n        app:menu=\"@menu/activity_main_drawer_drawer\" />\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n定义一个drawerlayout布局文件，然后最后在Activity里面调用就可以了。\n\n\n抽屉效果的实现也是不难的，我们只需要使用DrawerLayout这一个布局。首先我们定义一个drawer的xml文件，然后这里要注意，第一个放的子节点必须是你要放的主要界面，即是刚才的activity_main.xml。所以我们现在假定有以下的布局。\n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\">\n\n    <include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"\n        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"\n        app:menu=\"@menu/activity_main_drawer_menu\" />\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n这时我们要在res下开个menu文件夹，创建menu条目xml来创建对应的菜单。例如：\n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/animation\"\n            android:title=\"动画\" />\n        <item\n            android:id=\"@+id/book\"\n            android:title=\"书籍\" />\n        <item\n            android:id=\"@+id/music\"\n            android:title=\"音乐\" />\n        <item\n            android:id=\"@+id/game\"\n            android:title=\"游戏\" />\n    </group>\n</menu>\n```\n\n当然你也可以给每个条目添加icon，然后还要给NavigationView定制一个header，header也是个xml文件，这里就不给出header文件了。然后在代码中指定就形成一个初步的Drawer了。\n\n``` java\nmNavigationView = (NavigationView) findViewById(R.id.nav_view);\n        View nav_header = mNavigationView.inflateHeaderView(R.layout.nav_header);\n```\n\n\n","source":"_posts/project_learning.md","raw":"---\ntitle: 安卓实战学习记录01\ndate: 2016-03-20 23:28:52\ntags: \n - Android \r\ncategories: Android\n---\n\n---\n\n## 顶部导航和左右滑动抽屉\n\n#### Toolbar\n\n跟导航栏有关则有**Actionbar**和**Toolbar** 查阅资料可知，Toolbar是在API21后引进的，放在v7库当中，是应用的内容标准工具栏，而**Actionbar**一些方法已经标注过时了。相比于**Actionbar**，它变得更加自由。\n\n使用Toolbar要先把主题样式里的Actionbar去掉，在manifest中\n\n    android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\">\n\n\n此外toolbar 是没有tab的，他需要结合support库里的tablayout来完成原来actionbar里的tab功能。除此之外，你在使用toolbar的时候要先屏蔽掉\n\n定义好xml文件后，我们在java文件中引入toolbar这个类\n\n``` java\nprivate android.support.v7.widget.Toolbar toolbar;\n```\n\n这里注意要引用supportv7的包，否则会出错，Toolbar向下兼容，这样才可以接着调用**setSupportActionBar**\n\n\n``` java\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    oolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.mytoolbar);\n    setSupportActionBar(toolbar);\n    }\n\n```\n\ntoolbar很灵活，因为它就是一个viewgroup。如果要显示navigationicon，也许最好的做法是把它在代码中进行set，因为xml中的设置可能要API21以上才能看见\n\n\n#### DrawerLayout\n官方在13年发布的一个布局，用以创建侧滑菜单。从此我们可以不需要使用github上的侧滑菜单项目了。要创建一个DrawerLayout，我们必须要把它定为根视图，这样再把主要视图作为第一个子节点放入\n\n\n#### CoordinatorLayout\n\n根据谷歌的官方文档\n>CoordinatorLayout is a super-powered FrameLayout.\n\n可以看到它真是super-powered\nCoordinatorLayout一般用于顶层布局和协调子布局。\n要使用它必须在Gradle把包引进来。\n\n``` java\ncompile 'com.android.support:design:23.1.1' \n```\n由于CoordinatorLayout基于FrameLayout，所以这里也提一下FrameLayout，并且再提一下待会用到的几个layout\n##### FrameLayout\n\n帧布局FrameLayout在Android的五大布局中是最简单的布局方式，在需要布局中的控件有重叠的情况下才使用。FrameLayout中的控件layout\\_margin设置要依赖layout\\_gravity属性，否则layout_margin设置无效。如果想要控件正常显示，可以将控件的layout\\_gravity设置为top,以屏幕左上角为参考点。\n\n\n##### AppBarLayout\n>AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures.\n\n经常用来实现一线滑动效果并且经常和CoordinatorLayout配套使用\n\n##### TabLayout\n这也是谷歌推出的新控件，可以很方便的用来作标签导航。结合ViewPager一起使用能有很好的效果。\n\n### 标签页的具体实现\n\n标签页的主角毫无疑问就是TabLayout了。我们现在xml文件中定义TabLayout。\n\n\n``` java\n<android.support.design.widget.TabLayout\n   android:id=\"@+id/tabs\"\n   android:layout_width=\"match_parent\"\n   ndroid:layout_height=\"wrap_content\">\n\n```\n\n定义了之后就已经可以标签名之类的属性了。但是我们的目的是标签分页实现之后跳转到不同的Fragment。所以我们还得使用一个ViewPager跟TabLayout配套使用。要使得标签跳转，可以直接用**FragmentPagerAdapter** 跟TabLayout配套使用。这样这个Adapter就同时控制了TabLayout和ViewPager并使他们数据同步。\n``` java\n        <android.support.v4.view.ViewPager\n            android:id=\"@+id/myviewpager\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        </android.support.v4.view.ViewPager>\n```\n\n接下来是代码部分了\n``` java\n        TabLayout mTabLayout = (TabLayout) findViewById(R.id.tabs);\n\n        //取得一个自定义PagerAdapter的实例\n        mAdapter = new TabPagerAdapter(getSupportFragmentManager());\n        mViewPager = (ViewPager) findViewById(R.id.myviewpager);\n\n        //讲ViewPager和Adapter绑定起来获得数据\n        mViewPager.setAdapter(mAdapter);\n\n        //一站式同步，将TabLayout和PagerAdapter绑定起来\n        mTabLayout.setupWithViewPager(mViewPager);\n\n```\n\nPagerAdapter的定义可以去查看官方文档。需要实现两个方法。一个是**getItem**方法，用来根据position返回不同的Fragment。getCount方法用来返回标签的个数，而getPagerTitle方法可以获得页面对应的标签。代码把这些定义好就可以成功了。\n\n### 抽屉效果的实现\n首先得在xml定义一个 **DrawerLayout** ，然后第一个子节点是本体要显示的内容maincontent，然后之后放入一个**NavigationView**来做Menu。\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\">\n\n    <include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"\n        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"\n        app:menu=\"@menu/activity_main_drawer_drawer\" />\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n定义一个drawerlayout布局文件，然后最后在Activity里面调用就可以了。\n\n\n抽屉效果的实现也是不难的，我们只需要使用DrawerLayout这一个布局。首先我们定义一个drawer的xml文件，然后这里要注意，第一个放的子节点必须是你要放的主要界面，即是刚才的activity_main.xml。所以我们现在假定有以下的布局。\n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\">\n\n    <include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"\n        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"\n        app:menu=\"@menu/activity_main_drawer_menu\" />\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n这时我们要在res下开个menu文件夹，创建menu条目xml来创建对应的菜单。例如：\n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/animation\"\n            android:title=\"动画\" />\n        <item\n            android:id=\"@+id/book\"\n            android:title=\"书籍\" />\n        <item\n            android:id=\"@+id/music\"\n            android:title=\"音乐\" />\n        <item\n            android:id=\"@+id/game\"\n            android:title=\"游戏\" />\n    </group>\n</menu>\n```\n\n当然你也可以给每个条目添加icon，然后还要给NavigationView定制一个header，header也是个xml文件，这里就不给出header文件了。然后在代码中指定就形成一个初步的Drawer了。\n\n``` java\nmNavigationView = (NavigationView) findViewById(R.id.nav_view);\n        View nav_header = mNavigationView.inflateHeaderView(R.layout.nav_header);\n```\n\n\n","slug":"project_learning","published":1,"updated":"2016-03-21T16:02:49.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimru7nde000wtgxg4yimpbi6","content":"<hr>\n<h2 id=\"顶部导航和左右滑动抽屉\"><a href=\"#顶部导航和左右滑动抽屉\" class=\"headerlink\" title=\"顶部导航和左右滑动抽屉\"></a>顶部导航和左右滑动抽屉</h2><h4 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h4><p>跟导航栏有关则有<strong>Actionbar</strong>和<strong>Toolbar</strong> 查阅资料可知，Toolbar是在API21后引进的，放在v7库当中，是应用的内容标准工具栏，而<strong>Actionbar</strong>一些方法已经标注过时了。相比于<strong>Actionbar</strong>，它变得更加自由。</p>\n<p>使用Toolbar要先把主题样式里的Actionbar去掉，在manifest中</p>\n<pre><code>android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&gt;\n</code></pre><p>此外toolbar 是没有tab的，他需要结合support库里的tablayout来完成原来actionbar里的tab功能。除此之外，你在使用toolbar的时候要先屏蔽掉</p>\n<p>定义好xml文件后，我们在java文件中引入toolbar这个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> android.support.v7.widget.Toolbar toolbar;</span><br></pre></td></tr></table></figure>\n<p>这里注意要引用supportv7的包，否则会出错，Toolbar向下兼容，这样才可以接着调用<strong>setSupportActionBar</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    oolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.mytoolbar);</span><br><span class=\"line\">    setSupportActionBar(toolbar);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>toolbar很灵活，因为它就是一个viewgroup。如果要显示navigationicon，也许最好的做法是把它在代码中进行set，因为xml中的设置可能要API21以上才能看见</p>\n<h4 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h4><p>官方在13年发布的一个布局，用以创建侧滑菜单。从此我们可以不需要使用github上的侧滑菜单项目了。要创建一个DrawerLayout，我们必须要把它定为根视图，这样再把主要视图作为第一个子节点放入</p>\n<h4 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h4><p>根据谷歌的官方文档</p>\n<blockquote>\n<p>CoordinatorLayout is a super-powered FrameLayout.</p>\n</blockquote>\n<p>可以看到它真是super-powered<br>CoordinatorLayout一般用于顶层布局和协调子布局。<br>要使用它必须在Gradle把包引进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.android.support:design:23.1.1'</span></span><br></pre></td></tr></table></figure>\n<p>由于CoordinatorLayout基于FrameLayout，所以这里也提一下FrameLayout，并且再提一下待会用到的几个layout</p>\n<h5 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h5><p>帧布局FrameLayout在Android的五大布局中是最简单的布局方式，在需要布局中的控件有重叠的情况下才使用。FrameLayout中的控件layout_margin设置要依赖layout_gravity属性，否则layout_margin设置无效。如果想要控件正常显示，可以将控件的layout_gravity设置为top,以屏幕左上角为参考点。</p>\n<h5 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h5><blockquote>\n<p>AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures.</p>\n</blockquote>\n<p>经常用来实现一线滑动效果并且经常和CoordinatorLayout配套使用</p>\n<h5 id=\"TabLayout\"><a href=\"#TabLayout\" class=\"headerlink\" title=\"TabLayout\"></a>TabLayout</h5><p>这也是谷歌推出的新控件，可以很方便的用来作标签导航。结合ViewPager一起使用能有很好的效果。</p>\n<h3 id=\"标签页的具体实现\"><a href=\"#标签页的具体实现\" class=\"headerlink\" title=\"标签页的具体实现\"></a>标签页的具体实现</h3><p>标签页的主角毫无疑问就是TabLayout了。我们现在xml文件中定义TabLayout。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.design.widget.TabLayout</span><br><span class=\"line\">   android:id=<span class=\"string\">\"@+id/tabs\"</span></span><br><span class=\"line\">   android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">   ndroid:layout_height=<span class=\"string\">\"wrap_content\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>定义了之后就已经可以标签名之类的属性了。但是我们的目的是标签分页实现之后跳转到不同的Fragment。所以我们还得使用一个ViewPager跟TabLayout配套使用。要使得标签跳转，可以直接用<strong>FragmentPagerAdapter</strong> 跟TabLayout配套使用。这样这个Adapter就同时控制了TabLayout和ViewPager并使他们数据同步。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.v4.view.ViewPager</span><br><span class=\"line\">    android:id=\"@+id/myviewpager\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\"</span><br><span class=\"line\">    android:layout_height=\"match_parent\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.view.ViewPager&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接下来是代码部分了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TabLayout mTabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得一个自定义PagerAdapter的实例</span></span><br><span class=\"line\">mAdapter = <span class=\"keyword\">new</span> TabPagerAdapter(getSupportFragmentManager());</span><br><span class=\"line\">mViewPager = (ViewPager) findViewById(R.id.myviewpager);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//讲ViewPager和Adapter绑定起来获得数据</span></span><br><span class=\"line\">mViewPager.setAdapter(mAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一站式同步，将TabLayout和PagerAdapter绑定起来</span></span><br><span class=\"line\">mTabLayout.setupWithViewPager(mViewPager);</span><br></pre></td></tr></table></figure></p>\n<p>PagerAdapter的定义可以去查看官方文档。需要实现两个方法。一个是<strong>getItem</strong>方法，用来根据position返回不同的Fragment。getCount方法用来返回标签的个数，而getPagerTitle方法可以获得页面对应的标签。代码把这些定义好就可以成功了。</p>\n<h3 id=\"抽屉效果的实现\"><a href=\"#抽屉效果的实现\" class=\"headerlink\" title=\"抽屉效果的实现\"></a>抽屉效果的实现</h3><p>首先得在xml定义一个 <strong>DrawerLayout</strong> ，然后第一个子节点是本体要显示的内容maincontent，然后之后放入一个<strong>NavigationView</strong>来做Menu。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</span><br><span class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"</span><br><span class=\"line\">        android:layout_height=\"match_parent\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"</span><br><span class=\"line\">        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"</span><br><span class=\"line\">        app:menu=\"@menu/activity_main_drawer_drawer\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义一个drawerlayout布局文件，然后最后在Activity里面调用就可以了。</p>\n<p>抽屉效果的实现也是不难的，我们只需要使用DrawerLayout这一个布局。首先我们定义一个drawer的xml文件，然后这里要注意，第一个放的子节点必须是你要放的主要界面，即是刚才的activity_main.xml。所以我们现在假定有以下的布局。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</span><br><span class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"</span><br><span class=\"line\">        android:layout_height=\"match_parent\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"</span><br><span class=\"line\">        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"</span><br><span class=\"line\">        app:menu=\"@menu/activity_main_drawer_menu\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>这时我们要在res下开个menu文件夹，创建menu条目xml来创建对应的菜单。例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;group android:checkableBehavior=\"single\"&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/animation\"</span><br><span class=\"line\">            android:title=\"动画\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/book\"</span><br><span class=\"line\">            android:title=\"书籍\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/music\"</span><br><span class=\"line\">            android:title=\"音乐\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/game\"</span><br><span class=\"line\">            android:title=\"游戏\" /&gt;</span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<p>当然你也可以给每个条目添加icon，然后还要给NavigationView定制一个header，header也是个xml文件，这里就不给出header文件了。然后在代码中指定就形成一个初步的Drawer了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView = (NavigationView) findViewById(R.id.nav_view);</span><br><span class=\"line\">        View nav_header = mNavigationView.inflateHeaderView(R.layout.nav_header);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<hr>\n<h2 id=\"顶部导航和左右滑动抽屉\"><a href=\"#顶部导航和左右滑动抽屉\" class=\"headerlink\" title=\"顶部导航和左右滑动抽屉\"></a>顶部导航和左右滑动抽屉</h2><h4 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h4><p>跟导航栏有关则有<strong>Actionbar</strong>和<strong>Toolbar</strong> 查阅资料可知，Toolbar是在API21后引进的，放在v7库当中，是应用的内容标准工具栏，而<strong>Actionbar</strong>一些方法已经标注过时了。相比于<strong>Actionbar</strong>，它变得更加自由。</p>\n<p>使用Toolbar要先把主题样式里的Actionbar去掉，在manifest中</p>\n<pre><code>android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&gt;\n</code></pre><p>此外toolbar 是没有tab的，他需要结合support库里的tablayout来完成原来actionbar里的tab功能。除此之外，你在使用toolbar的时候要先屏蔽掉</p>\n<p>定义好xml文件后，我们在java文件中引入toolbar这个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> android.support.v7.widget.Toolbar toolbar;</span><br></pre></td></tr></table></figure>\n<p>这里注意要引用supportv7的包，否则会出错，Toolbar向下兼容，这样才可以接着调用<strong>setSupportActionBar</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    oolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.mytoolbar);</span><br><span class=\"line\">    setSupportActionBar(toolbar);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>toolbar很灵活，因为它就是一个viewgroup。如果要显示navigationicon，也许最好的做法是把它在代码中进行set，因为xml中的设置可能要API21以上才能看见</p>\n<h4 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h4><p>官方在13年发布的一个布局，用以创建侧滑菜单。从此我们可以不需要使用github上的侧滑菜单项目了。要创建一个DrawerLayout，我们必须要把它定为根视图，这样再把主要视图作为第一个子节点放入</p>\n<h4 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h4><p>根据谷歌的官方文档</p>\n<blockquote>\n<p>CoordinatorLayout is a super-powered FrameLayout.</p>\n</blockquote>\n<p>可以看到它真是super-powered<br>CoordinatorLayout一般用于顶层布局和协调子布局。<br>要使用它必须在Gradle把包引进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.android.support:design:23.1.1'</span></span><br></pre></td></tr></table></figure>\n<p>由于CoordinatorLayout基于FrameLayout，所以这里也提一下FrameLayout，并且再提一下待会用到的几个layout</p>\n<h5 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h5><p>帧布局FrameLayout在Android的五大布局中是最简单的布局方式，在需要布局中的控件有重叠的情况下才使用。FrameLayout中的控件layout_margin设置要依赖layout_gravity属性，否则layout_margin设置无效。如果想要控件正常显示，可以将控件的layout_gravity设置为top,以屏幕左上角为参考点。</p>\n<h5 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h5><blockquote>\n<p>AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures.</p>\n</blockquote>\n<p>经常用来实现一线滑动效果并且经常和CoordinatorLayout配套使用</p>\n<h5 id=\"TabLayout\"><a href=\"#TabLayout\" class=\"headerlink\" title=\"TabLayout\"></a>TabLayout</h5><p>这也是谷歌推出的新控件，可以很方便的用来作标签导航。结合ViewPager一起使用能有很好的效果。</p>\n<h3 id=\"标签页的具体实现\"><a href=\"#标签页的具体实现\" class=\"headerlink\" title=\"标签页的具体实现\"></a>标签页的具体实现</h3><p>标签页的主角毫无疑问就是TabLayout了。我们现在xml文件中定义TabLayout。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.design.widget.TabLayout</span><br><span class=\"line\">   android:id=<span class=\"string\">\"@+id/tabs\"</span></span><br><span class=\"line\">   android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">   ndroid:layout_height=<span class=\"string\">\"wrap_content\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>定义了之后就已经可以标签名之类的属性了。但是我们的目的是标签分页实现之后跳转到不同的Fragment。所以我们还得使用一个ViewPager跟TabLayout配套使用。要使得标签跳转，可以直接用<strong>FragmentPagerAdapter</strong> 跟TabLayout配套使用。这样这个Adapter就同时控制了TabLayout和ViewPager并使他们数据同步。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.v4.view.ViewPager</span><br><span class=\"line\">    android:id=\"@+id/myviewpager\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\"</span><br><span class=\"line\">    android:layout_height=\"match_parent\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.view.ViewPager&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接下来是代码部分了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TabLayout mTabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得一个自定义PagerAdapter的实例</span></span><br><span class=\"line\">mAdapter = <span class=\"keyword\">new</span> TabPagerAdapter(getSupportFragmentManager());</span><br><span class=\"line\">mViewPager = (ViewPager) findViewById(R.id.myviewpager);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//讲ViewPager和Adapter绑定起来获得数据</span></span><br><span class=\"line\">mViewPager.setAdapter(mAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一站式同步，将TabLayout和PagerAdapter绑定起来</span></span><br><span class=\"line\">mTabLayout.setupWithViewPager(mViewPager);</span><br></pre></td></tr></table></figure></p>\n<p>PagerAdapter的定义可以去查看官方文档。需要实现两个方法。一个是<strong>getItem</strong>方法，用来根据position返回不同的Fragment。getCount方法用来返回标签的个数，而getPagerTitle方法可以获得页面对应的标签。代码把这些定义好就可以成功了。</p>\n<h3 id=\"抽屉效果的实现\"><a href=\"#抽屉效果的实现\" class=\"headerlink\" title=\"抽屉效果的实现\"></a>抽屉效果的实现</h3><p>首先得在xml定义一个 <strong>DrawerLayout</strong> ，然后第一个子节点是本体要显示的内容maincontent，然后之后放入一个<strong>NavigationView</strong>来做Menu。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</span><br><span class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"</span><br><span class=\"line\">        android:layout_height=\"match_parent\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"</span><br><span class=\"line\">        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"</span><br><span class=\"line\">        app:menu=\"@menu/activity_main_drawer_drawer\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义一个drawerlayout布局文件，然后最后在Activity里面调用就可以了。</p>\n<p>抽屉效果的实现也是不难的，我们只需要使用DrawerLayout这一个布局。首先我们定义一个drawer的xml文件，然后这里要注意，第一个放的子节点必须是你要放的主要界面，即是刚才的activity_main.xml。所以我们现在假定有以下的布局。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</span><br><span class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</span><br><span class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawer_layout\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">    android:fitsSystemWindows=\"true\" tools:openDrawer=\"start\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;include layout=\"@layout/activity_main\" android:layout_width=\"match_parent\"</span><br><span class=\"line\">        android:layout_height=\"match_parent\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.design.widget.NavigationView android:id=\"@+id/nav_view\"</span><br><span class=\"line\">        android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\"</span><br><span class=\"line\">        android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\"</span><br><span class=\"line\">        app:menu=\"@menu/activity_main_drawer_menu\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>这时我们要在res下开个menu文件夹，创建menu条目xml来创建对应的菜单。例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;group android:checkableBehavior=\"single\"&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/animation\"</span><br><span class=\"line\">            android:title=\"动画\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/book\"</span><br><span class=\"line\">            android:title=\"书籍\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/music\"</span><br><span class=\"line\">            android:title=\"音乐\" /&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=\"@+id/game\"</span><br><span class=\"line\">            android:title=\"游戏\" /&gt;</span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<p>当然你也可以给每个条目添加icon，然后还要给NavigationView定制一个header，header也是个xml文件，这里就不给出header文件了。然后在代码中指定就形成一个初步的Drawer了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView = (NavigationView) findViewById(R.id.nav_view);</span><br><span class=\"line\">        View nav_header = mNavigationView.inflateHeaderView(R.layout.nav_header);</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/20151226-01/Image01.png","slug":"Image01.png","post":"cimru7nc80000tgxgyepl28ij","modified":1,"renderable":0},{"_id":"source/_posts/20160323-01/example.jpg","post":"cimru7ncs000btgxgxjeslv5b","slug":"example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/20160328-01/java-thread.jpg","post":"cimru7ncu000etgxgzfais6mo","slug":"java-thread.jpg","modified":1,"renderable":1},{"_id":"source/_posts/20160408-01/memory.jpg","post":"cimru7nd4000qtgxgytc7gyee","slug":"memory.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cimru7nc80000tgxgyepl28ij","category_id":"cimru7nci0005tgxg9ute8gn5","_id":"cimru7ncu000dtgxgq2hedny1"},{"post_id":"cimru7ncs000btgxgxjeslv5b","category_id":"cimru7nci0005tgxg9ute8gn5","_id":"cimru7nd0000jtgxgcmugr2nx"},{"post_id":"cimru7nce0002tgxgubixixsv","category_id":"cimru7nci0005tgxg9ute8gn5","_id":"cimru7nd3000otgxg8bi7rtk4"},{"post_id":"cimru7ncj0006tgxg8ivxbb9e","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndd000ttgxgb118nk5p"},{"post_id":"cimru7nd1000ltgxgc1cjrkff","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndg000xtgxgol847jj8"},{"post_id":"cimru7nd4000qtgxgytc7gyee","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndg000ztgxghzd8b55z"},{"post_id":"cimru7nck0007tgxgsx65o0ep","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndi0013tgxgvuekrnfh"},{"post_id":"cimru7ndb000stgxgdrxxjs4v","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndj0015tgxgp7z9rw1a"},{"post_id":"cimru7nde000wtgxg4yimpbi6","category_id":"cimru7ndd000utgxgj6r0pej2","_id":"cimru7ndk0019tgxgth45fgix"},{"post_id":"cimru7ncm0009tgxgbvqijnhy","category_id":"cimru7ndd000utgxgj6r0pej2","_id":"cimru7ndl001btgxgm6wj9fsq"},{"post_id":"cimru7ncu000etgxgzfais6mo","category_id":"cimru7ncx000ftgxgn8q0nakr","_id":"cimru7ndo001etgxgl8adtack"},{"post_id":"cimru7ncz000itgxgnyfvb3ix","category_id":"cimru7ndd000utgxgj6r0pej2","_id":"cimru7ndp001gtgxgdws4y7wt"}],"PostTag":[{"post_id":"cimru7ncm0009tgxgbvqijnhy","tag_id":"cimru7ncg0004tgxgvf9rdnqy","_id":"cimru7ncu000ctgxgz016qbkd"},{"post_id":"cimru7nc80000tgxgyepl28ij","tag_id":"cimru7ncg0004tgxgvf9rdnqy","_id":"cimru7ncz000htgxgjsvutjxo"},{"post_id":"cimru7nc80000tgxgyepl28ij","tag_id":"cimru7ncm0008tgxgtcas875v","_id":"cimru7nd1000ktgxggmvhjkno"},{"post_id":"cimru7ncz000itgxgnyfvb3ix","tag_id":"cimru7ncg0004tgxgvf9rdnqy","_id":"cimru7nd3000ptgxgl4iymepn"},{"post_id":"cimru7nd1000ltgxgc1cjrkff","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7nda000rtgxgzu5xp11l"},{"post_id":"cimru7ndb000stgxgdrxxjs4v","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7ndg000ytgxgj32ietjd"},{"post_id":"cimru7nde000wtgxg4yimpbi6","tag_id":"cimru7ncg0004tgxgvf9rdnqy","_id":"cimru7ndh0011tgxgcc2y91rh"},{"post_id":"cimru7nce0002tgxgubixixsv","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7ndi0014tgxghaxed43h"},{"post_id":"cimru7nce0002tgxgubixixsv","tag_id":"cimru7ncg0004tgxgvf9rdnqy","_id":"cimru7ndk0017tgxgd0n8q0v3"},{"post_id":"cimru7nce0002tgxgubixixsv","tag_id":"cimru7ncm0008tgxgtcas875v","_id":"cimru7ndl001atgxgjeabgnyb"},{"post_id":"cimru7ncj0006tgxg8ivxbb9e","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7ndn001dtgxggpdch887"},{"post_id":"cimru7nck0007tgxgsx65o0ep","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7ndp001ftgxg8to8opz9"},{"post_id":"cimru7ncs000btgxgxjeslv5b","tag_id":"cimru7ndm001ctgxg7mxcqfnq","_id":"cimru7ndq001itgxgot7jf04n"},{"post_id":"cimru7ncu000etgxgzfais6mo","tag_id":"cimru7ncx000gtgxggxd3lnfv","_id":"cimru7nds001ktgxgdfca5wa4"},{"post_id":"cimru7nd4000qtgxgytc7gyee","tag_id":"cimru7ndr001jtgxgfjw874i8","_id":"cimru7nds001ltgxg73tgy100"}],"Tag":[{"name":"Android","_id":"cimru7ncg0004tgxgvf9rdnqy"},{"name":"software","_id":"cimru7ncm0008tgxgtcas875v"},{"name":"java","_id":"cimru7ncx000gtgxggxd3lnfv"},{"name":"软件使用","_id":"cimru7ndm001ctgxg7mxcqfnq"},{"name":"java java虚拟机","_id":"cimru7ndr001jtgxgfjw874i8"}]}}